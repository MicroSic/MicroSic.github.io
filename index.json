[{"content":" 友情提示：\n本教程适合把超链接打开并缓慢阅读\n 为什么要水这篇文章 给博客换主题的时候发现MemE主题和Zzo主题的评论配置文件有出入，不能直接套用现有的MemE主题Waline配置。所以我灵机一动：要不我自己搞吧。\n以MemE,Zzo和stack三个主题为例，看一下不同主题的评论配置有什么不同：\n首先看一下MemE主题的评论配置 MemE主题支持Valine，因为Waline是Valine的改良版，所以可以互相参考配置。首先主题的github项目中搜索Valine，同样可以看到除了config-examples/zh-cn/config.toml（主题的简体配置文件，这里不考虑繁体中文和英文，只是配置文件的语言项）以外，还有三个文件提到了Valine，分别是layouts/partials/third-party/valine.html，layouts/partials/third-party/script.html和layouts/partials/components/comments.html。\n各文件的作用：\n-comments.html文件的作用是控制是否开启评论（enableComments），开启哪个评论系统（enableValine），如果开启，则插入相关评论的\u0026lt;div\u0026gt;标签 id；\n-script.html文件的作用是载入开启的评论的相应 HTML 文件（valine.html）；\n-valine.html文件的作用是调用valine.js，对评论功能进行设定。\n再来来看一下Zzo主题的评论配置 同样在MemE在github项目中搜索Valine，可以看到除了config/_default/params.toml（主题的配置文件之一，Zzo主题把正常的config.toml分成了四个，params.toml是其中一个）以外，还有两个文件：layouts/partials/comments/valine.html和layouts/partials/comments/comments.html。\n各文件的作用：\n-comments.html文件的作用是控制是否开启评论（enableComments），开启哪个评论系统（enableValine），如果开启，则直接载入开启的评论的相应 HTML 文件（valine.html）；\n-valine.html文件的作用是对评论功能进行设定。\n这样一来，Zzo就不用像MemE一样需要script.html文件专门用来载入valine.html，因为功能被合并了。\n附加题：看看同样美貌的stack主题！ stack主题支持Waline而不支持Valine，这是我万万没想到的（笑）。同样地，首先在项目中搜索Waline，发现除了config.yaml（stack主题的配置文件，和config.toml是一个东西）以外只有layouts/partials/comments/provider/waline.html提到了Waline，而且在文件中强制插入\u0026lt;div\u0026gt;标签 id，并且也对评论功能进行设定。\nWaline是什么，为什么说他是Valine的改良版 请看这篇博客。简而言之就是Gitalk 和 Valine都有一定的安全隐患，于是Waline诞生了。\n部署Waline 按照Waline官方文档快速开始。\n第一步推荐使用 LeanCloud 国际版，因为国内版还需要和备案的域名绑定，很是麻烦。第二步利用Vercel部署Waline，点击官方给出的快速部署链接，也就是那个deploy蓝色按钮，然后按照官方文档继续部署，直到你获得ServerURL，也就是服务端地址。\n 题外话：有段时间Waline的快速部署链接失效，因为github仓库的主分支由master改为main，而快速部署链接还没来得及修改，因此clone project会出现错误，现在已经没问题了。\n 域名问题 如果你购买了一个域名，推荐你为这个Vercel项目添加一个子域名。因为Vercel分配的域名很丑，而且每次更改环境变量之后都要Redeploy（重新部署）使改动生效，而每次改动生效后你的ServerURL都可能有变化，这个时候需要修改你的配置文件，否则会影响你的使用。\n开始配置吧 修改配置文件 以Zzo主题为例，回到本地的博客根目录，在config/_default/params.toml中，打开评论全局设置，然后找到Valine的配置，按照Valine的格式在他的下方抄一份Waline的配置，比如我的如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13  [Waline] enable = true appId = \u0026#39;你的appId\u0026#39; appKey = \u0026#39;你的appKey\u0026#39; ServerURL = \u0026#34;你的ServerURL\u0026#34; Placeholder = \u0026#34;你的邮箱\u0026#34; #用来收取评论通知 Avatar = \u0026#34;mp\u0026#34; Meta = [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;, \u0026#34;link\u0026#34;] PageSize = 10 Lang = \u0026#34;zh-CN\u0026#34; Highlight = true AvatarCDN = \u0026#34;https://cdn.v2ex.com/gravatar/\u0026#34; #waline的评论头像可以使用某种样式也可以使用cdn，这里用v2ex的cdn RequiredFields = [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;]   进入Zzo主题文件夹，找到之前说过的两个和Valine有关的文件，也就是layouts/partials/comments/valine.html和layouts/partials/comments/comments.html，把他们两个复制到~/layouts/partials/comments/valine.html和~/layouts/partials/comments/comments.html中（博客根目录下）。\nValine是你的模板，Waline要长得和他一模一样 将valine.html重命名为waline.html用visual studio打开，看一下这个文件长什么样：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  {{- if .Site.Params.valine.visitor -}} \u0026lt;span id=\u0026#34;{{ .RelPermalink | relLangURL }}\u0026#34; class=\u0026#34;leancloud_visitors\u0026#34; data-flag-title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;post-meta-item-text\u0026#34;\u0026gt;文章阅读量 \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;leancloud-visitors-count\u0026#34;\u0026gt;0\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/span\u0026gt; {{- end }} \u0026lt;div id=\u0026#34;vcomments\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdn1.lncld.net/static/js/3.0.4/av-min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;//unpkg.com/valine/dist/Valine.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; new Valine({ el: \u0026#39;#vcomments\u0026#39; , appId: \u0026#39;{{ .Site.Params.valine.appId }}\u0026#39;, appKey: \u0026#39;{{ .Site.Params.valine.appKey }}\u0026#39;, notify: {{ .Site.Params.valine.notify }}, verify: {{ .Site.Params.valine.verify }}, avatar:\u0026#39;{{ .Site.Params.valine.avatar }}\u0026#39;, placeholder: \u0026#39;{{ .Site.Params.valine.placeholder }}\u0026#39;, visitor: {{ .Site.Params.valine.visitor }} }); \u0026lt;/script\u0026gt;   以appId为例，有些主题的valine.html文件会写成appId: '{{ .Site.Params.valineappId }}'或者更奇怪的，但一定要记住这个格式，因为要和他的格式完全对应。\n删掉所有代码，修改为官方文档给出的代码：\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;//cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; Waline({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;https://your-domain.vercel.app\u0026#39;, }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;   将serverURL的值修改为'{{ .Site.Params.waline.serverURL }}'，然后打开params.toml，根据之前添加的项，在serverURL的下一行继续添加：\n1 2 3 4 5 6 7 8  placeholder: \u0026#39;{{ .Site.Params.waline.Placeholder }}\u0026#39;, avatar: \u0026#39;{{ .Site.Params.waline.Avatar }}\u0026#39;, meta: {{ .Site.Params.waline.Meta }}, pageSize: {{ .Site.Params.waline.PageSize }}, lang: \u0026#39;{{ .Site.Params.waline.Lang }}\u0026#39;, highlight: {{ .Site.Params.waline.Highlight }}, avatarCDN: \u0026#39;{{ .Site.Params.waline.AvatarCDN }}\u0026#39;, requiredFields: {{ .Site.Params.waline.RequiredFields }}   最后，我的waline.html是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;//cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; Waline({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;{{ .Site.Params.waline.ServerURL }}\u0026#39;, placeholder: \u0026#39;{{ .Site.Params.waline.Placeholder }}\u0026#39;, avatar: \u0026#39;{{ .Site.Params.waline.Avatar }}\u0026#39;, meta: {{ .Site.Params.waline.Meta }}, pageSize: {{ .Site.Params.waline.PageSize }}, lang: \u0026#39;{{ .Site.Params.waline.Lang }}\u0026#39;, highlight: {{ .Site.Params.waline.Highlight }}, avatarCDN: \u0026#39;{{ .Site.Params.waline.AvatarCDN }}\u0026#39;, requiredFields: {{ .Site.Params.waline.RequiredFields }} }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;   打开comments.html,找到valine那段代码，复制一下放到他的下面，并把valine改为waline，大概是这样：\n1 2 3 4 5 6 7 8  {{ else if $.Param \u0026#34;valine.enable\u0026#34; }} {{ partial \u0026#34;comments/valine.html\u0026#34; . }} + {{ else if $.Param \u0026#34;waline.enable\u0026#34; }} + {{ partial \u0026#34;comments/waline.html\u0026#34; . }} {{ else if $.Param \u0026#34;changyan.changyanAppid\u0026#34; }} {{ partial \u0026#34;comments/changyan.html\u0026#34; . }}   大功告成了。\n总而言之 总而言之，就按照valine的配置方法去配置waline就没问题了。\n后续魔改 参考https://mantyke.icu/2021/comment/\n","description":"","id":0,"section":"posts","tags":["Hugo","Waline"],"title":"Hugo | 为Zzo主题添加Waline评论","uri":"http://blog.tantalum.life/posts/add-waline-in-hugo-blog/"},{"content":"事情的发展难以预料 受害者Roelxy：虽然这篇文章的标题是\u0026quot;博客折腾记\u0026quot;，但实际上我只是为博客换了个功能更强大的主题，结果一不小心就404了\u0026hellip;我能怎么办，我也很绝望啊！\n  blockquote.quote { position: relative; margin: 2em auto; padding-left: 3em; border: none; \u0026::before { position: absolute; left: 0; content: '“'; color: var(--color-contrast-low); font-family: 'JetBrains Mono', 'Amstelvar', 'Noto Serif SC', serif; font-size: 3em; font-weight: bold; line-height: 1; } \u0026.poetry { display: table; padding: 0; \u0026::before { left: -1em; } p:last-child { margin: 0; } } \u0026.en { p { line-height: 1.618; text-align: left; hyphens: auto; -webkit-hyphens: auto; -moz-hyphens: auto; } } } @media (max-width: $maxWidth) { blockquote.quote { \u0026.poetry { padding-left: 3em; \u0026::before { left: 0; } } } }  看中Zzo主题的搜索、代码样式和目录，英文字体也很好看，狠下心来从简洁风格的MemE跳槽而来。步骤十分傻白甜：没有git submodule，直接把仓库文件下载到本地的博客根目录，然后替换配置文件并做基础改动。Hugo server -D本地预览毫无问题，怎么就，怎么就构建失败了呢？\n The path you are accessing was not found in the Build Outputs of your Deployment.If you want to view your Build Outputs directly, you can turn on the Directory Listing.\n 博客搭建方式是hugo+Vercel，并把源码推送到Github中让其连接Vercel进行自动部署。对于这种本地预览完全没问题，但部署过程出现错误这种情况我毫无头绪，甚至还有一点小崩溃。虽然我留有存档，能一键回滚到前一个版本，但亲眼看见自己的成果功亏一篑多少还是有些难受\u0026hellip;（没错我是小白，建博客也就不到一周时间）\n修改了博客文件夹的一些内容，试图让他构建成功，无果。把这件事跟皮塔丘说了一下，她为我提供了新的思路：本地渲染，把渲染出的文件推到一个新仓库，用Github Pages发布，也就是Hugo+Github Pages的搭建方式。为了优先拯救404的博客，我先用存档将其回归正常（现在成了堆放随笔的地方），然后准备用新的域名试水（也就是这个博客）。\n历史总是惊人的相似 Suica的利用Github Pages与Github Action搭建并部署Hugo博客  对新仓库打声招呼 在Github中建立两个仓库：可以设为私密的源码仓库（存放你的博客根目录，可以随意命名，例如blog）和需要公开的编译仓库。由于一些原因，如果编译仓库的名字不是username.github.io（username是你的Github用户名）的话，会导致一些问题，比如css样式无法加载，具体来说就是将config.toml的baseURL设置为含子路径的地址，不能正确的处理所有资源的构建位置。想了解更多请看这篇博客。\n由于我之前按照这篇博客搭建过博客，所以我进行过git全局配置，且本地存有SSH key，所以略过SSH生成与上传公钥步骤。\nGithub登录后右上角Settings里找到Developer settings，再点Personal access tokens，Generate new token生成新的token，Select scopes里勾选repo全部内容与workflow，最后点击绿色按钮生成，将生成的Token保存下来。然后使用可视化的git工具：Github Desktop将支离破碎的博客根目录push到源码仓库中（使用代码也可）。进入源码仓库，可以发现本地的文件已经被推送到源码仓库了。\n点进源码仓库的Settings中，找到Secrets，点击New repository secret，名称为PERSONAL_TOKEN，内容为之前备份下来的Token。\nGithub Action是什么能吃吗 源码仓库中点击上方的Actions，set up a workflow yourself，之后你会发现github会在根目录下新建/.github/workflows/xxx.yml文件，下方是这个文件的编辑区域。把下面的配置复制进去，yml文件的名称与配置第一行的name随意填，特别注意我添加注释的地方。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  name:hugo-blogon:push:branches:- main # 源码仓库的默认分支，这里是main，有时也是masterpull_request:jobs:deploy:runs-on:ubuntu-20.04concurrency:group:${{ github.workflow }}-${{ github.ref }}steps:- uses:actions/checkout@v2# with: # 如果你安装主题时用的是git submodule add# submodules: true # 那么这三行不必注释掉，这一行填写 true# fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.89.1\u0026#39;# 填写你的hugo版本，可用hugo version查看extended:true# 如果你使用的不是extended版本的hugo，将true改为false- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3if:${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} # 注意填写main或者master，其他不要动with:personal_token:${{ secrets.PERSONAL_TOKEN }}# 如果secret取了其他名称，将PERSONAL_TOKEN替换掉external_repository:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io# 填写远程仓库，username是你的github用户名publish_dir:./publiccname:blog.example.com # 填写你的自定义域名。如果没有用自定义域名，注释掉这行  以上代码来自Suica！\n提交commit，保存，然后可以发现action在尝试运行，绿色代表部署成功。这个时候编译仓库里可以看到自动建了一个名为gh-pages的分支，里面出现了许多东西。如果你没有填写自定义域名，那么username.github.io就是你的博客地址，此时打开你的博客域名应该已经可以看到博客内容。这种搭建方式就是Hugo+Github Action自动部署。\n很奇怪的是，如果我参考这个workflow，在部署（deploy）那步会出现奇怪的错误：\n error:src refspec main does not match any\n 感觉和Vercel的404错误差不多\u0026hellip;\n搭建之后还可以继续优化！ 如何获得国内加速 由于github在国内加载速度极慢，我没有填写自定义域名。如果想获得国内加速，可以加一层cloudflare证书，或者是Vercel(需要自有域名，Vercel分配的域名很丑)。这里推荐后者，可以绑定自己的域名，同时获得不错的国内加速。\n点击Vercel注册页面，选择使用 Github 账号注册，弹出授权窗口时，点击Authorize Vercel，随后跳转到Let\u0026rsquo;s build something new页面（如果没有，在Dashboard点击 New project），在Import Git Repository下方选择Add github org or account，弹出安装窗口，点击Install。之后再在GIT SCOPE中点击你的 Github 账户，下方的项目选择username.github.io，也就是你的编译仓库，点击skip，输入Vercel项目名（随意），然后deploy，等看到Congratulations和满屏烟花时，你获得了不错的国内加速。\n关于自定义域名 如果你在源码仓库填写workflow那一步就添加了自有域名，请参考Suica的自定义域名注意事项。但这样其实没什么必要啦，如果将域名交给Vercel保管的话，这样会获得两个博客地址，一个是github.io（国外访问）一个是自己的域名（国内加速），好处多多喔！\nVercel点进刚刚添加的项目，右上角setting中选择domains，输入你的域名，点击add，然后refresh一下查看应该添加的DNS记录，按要求去DNS提供商那里添加（一般是内容为76.76.21.21的A记录或内容为cname.vercel-dns.com的CNAME记录），最后回到Vercel中refresh一下看到两个蓝色对号就是成功了，恭喜你，这时你已经可以使用你的域名进行访问了。\n","description":"","id":1,"section":"posts","tags":["Hugo"],"title":"Hugo | 菜鸟博客折腾记","uri":"http://blog.tantalum.life/posts/if-you-see-404-when-deploying-blog/"},{"content":"MemE 目前我的博客采用MemE主题，这款主题由reuixiy制作，设计理念是轻量、极简主义，但不简陋，同时也对高度自定义非常友好，甚至还提供了简繁体中文的配置文档，也就是config.toml，以下是开发者reuixiy对MemE主题的介绍：\n MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。MemE 主题专注于优雅、简约、现代，以及代码的正确性。MemE 主题对习惯了 Hexo 的用户非常友好，是从 Hexo 迁移到 Hugo 的不错选择。\n  为什么要起名为 MemE 呢？这四个字母的含义是基于这个单词本身的，即希望你的博客以及文章能够像模因一样传播、影响。当然，希望这个主题也是如此，并给你带来欢乐。至于这四个字母的形式（MemE），则是受 Taylor Swift 的 ME! 中的「you can’t spell “awesome” without “me”」启发。同时，这两个字母的大写就将这个单词分成了两部分——ME 和 em，中间两个字母组成 em，这也给人一种可爱的感觉。此外，em 也是 me 的反写，这又是我非常喜欢的形式！\n  MemE 主题践行极简主义，没有使用现有的流行前端库，主题的 HTML 和 CSS 皆由我纯手工从零雕琢而成。同时，MemE 的 CSS 也是按需生成的，比如：如果你不需要代码高亮的功能，那么代码高亮的样式就不会被加入 MemE 的 CSS 文件中。更甚，MemE 无需加载任何图标库——主题的图标是通过 Hugo 的数据模板直接将 SVG 嵌入到 HTML 中实现的——这使得 MemE 不会去加载图标库中大量你所不需要的图标，节约了很多资源。当然，这也意味着你可以方便地自定义属于自己的图标。\n 不过我自己也是小白哈哈哈，所以也参考了很多大佬的配置。在这篇文章的最后我列出了我参考的资料。感谢各位，万物皆互联。\n基础部分 目录 在config.toml中将enableTOC设为true，然后在文章的 Front-Matters 加上toc: true即可。\n需要注意的是目录只能显示二级以下的标题。如果需要显示一级标题，可以将startLevel修改为 1（默认2）。\n 不过，并不建议在文章内用一级标题，因为一级标题为文章标题。所以，文章内还是建议以二级标题开始，这更符合逻辑，也更有利于SEO(search engine optimization)。\n 关于目录的位置，请看这里\n网络字体 请看这篇博客\n进阶部分 页脚添加今日诗词 参考：https://guanqr.com/tech/website/add-jinrishici-in-meme/\n在 MemE 主题的自定义页脚文件中添加以下代码即可：\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;!-- 文件位置：~/layouts/partials/custom/footer.html --\u0026gt; \u0026lt;script src=\u0026#34;https://sdk.jinrishici.com/v2/browser/jinrishici.js\u0026#34; charset=\u0026#34;utf-8\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;text class=\u0026#34;poem_sentence\u0026#34;\u0026gt;\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;poem_info\u0026#34;\u0026gt;\u0026lt;/text\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; jinrishici.load(function(result) { var sentence = document.querySelector(\u0026#34;.poem_sentence\u0026#34;) var info = document.querySelector(\u0026#34;.poem_info\u0026#34;) sentence.innerHTML = result.data.content info.innerHTML = \u0026#39;——\u0026#39; + result.data.origin.author }); \u0026lt;/script\u0026gt;   这里我出现了一个问题，因为设置了诗句和作者之间用破折号「——」连接，而我按照教程在~/layouts/partials/custom/footer.html中添加了代码后发现破折号显示乱码，而且生成的诗句被放在了最下方，而我希望诗句处在作者和版权之间，所以我在~/layouts/partials/footer.html的适当位置添加代码。\n 需要注意我直接修改了meme主题的页脚文件而不是主题的自定义页脚文件，只适用于手动安装主题，如果是 git submodule 方式安装主题则不要直接修改主题页脚文件，否则不利于主题后续更新。\n 加载进度条 参考：https://zhixuan2333.github.io/posts/ac760353/#加载进度条\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;!-- layouts/partials/footer/custom.html --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/zhixuan2333/gh-blog@v0.1.0/js/nprogress.min.js\u0026#34; integrity=\u0026#34;sha384-bHDlAEUFxsRI7JfULv3DTpL2IXbbgn4JHQJibgo5iiXSK6Iu8muwqHANhun74Cqg\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/zhixuan2333/gh-blog@v0.1.0/css/nprogress.css\u0026#34; integrity=\u0026#34;sha384-KJyhr2syt5+4M9Pz5dipCvTrtvOmLk/olWVdfhAp858UCa64Ia5GFpTN7+G4BWpE\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; \u0026lt;script\u0026gt; NProgress.start(); document.addEventListener(\u0026#34;readystatechange\u0026#34;, () =\u0026gt; { if (document.readyState === \u0026#34;interactive\u0026#34;) NProgress.inc(0.8); if (document.readyState === \u0026#34;complete\u0026#34;) NProgress.done(); }); \u0026lt;/script\u0026gt;   需要注意stack和meme的页脚文件位置不太一样，meme的在~/layouts/partials/custom/footer.html。不过进度条是在页面顶端，所以我选择在header.html添加代码。\n短代码 在博客中插入B站视频 参考：https://mogeko.me/posts/zh-cn/079/\n虽然我个人相当不喜欢bilibili，但bili在哪都能看，而油管不行。\n添加代码 在layouts/shortcodes文件夹中创建文件bilibili.html(如果没有那个文件夹就自己新建一个)，我选择在博客根目录下建layouts/shortcodes文件夹，后续换主题的时候方便管理。然后粘贴如下代码：\n1 2 3 4 5 6 7 8  {{ $videoID := index .Params 0 }} {{ $pageNum := index .Params 1 | default 1}} {{ if (findRE \u0026#34;^[bB][vV][0-9a-zA-Z]+$\u0026#34; $videoID) }} \u0026lt;div\u0026gt;\u0026lt;iframe id=\u0026#34;biliplayer\u0026#34; src=\u0026#34;//player.bilibili.com/player.html?bvid={{ $videoID }}\u0026amp;page={{ $pageNum }}\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34; loading=\u0026#34;lazy\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt;\u0026lt;/div\u0026gt; {{ else }} \u0026lt;div\u0026gt;\u0026lt;iframe id=\u0026#34;biliplayer\u0026#34; src=\u0026#34;//player.bilibili.com/player.html?aid={{ $videoID }}\u0026amp;page={{ $pageNum }}\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34; loading=\u0026#34;lazy\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt;\u0026lt;/div\u0026gt; {{ end }}   然后用 CSS 修改播放器的尺寸，最好能根据不同的屏幕大小 (PC 和手机) 动态调整。在/assets/scss/components/_post-meta.scss中插入：\n1 2 3 4 5 6 7 8 9 10 11  // 嵌入 BiliBili 视频 #biliplayer { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #biliplayer { width: 100%; height: 250px; } }   或者直接在刚刚的layouts/shortcodes/bilibili.html中添加：\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;style\u0026gt; // 嵌入 BiliBili 视频 #biliplayer { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #biliplayer { width: 100%; height: 250px; } } \u0026lt;/style\u0026gt;   我在这里做了一点改动，第二步css/html的id应该是biliplayer而不是bilibili，如果看不懂的话直接复制我的代码即可。\n应用 在你想插入 B 站视频的地方写下 (AV号不带 av/AV，BV号必须带bv/BV，PV号控制分P，默认为 1，直接写不需要代码框)\n1  {{\u0026lt; bilibili [AV号/BV号] [PV号] \u0026gt;}}   以长毛象的介绍这段影片为例：\n可以写做：\n1  {{\u0026lt; bilibili BV1UW411g7eq \u0026gt;}}   或者\n1  {{\u0026lt; bilibili 21139681 \u0026gt;}}   效果如下：\n  #biliplayer { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #biliplayer { width: 100%; height: 250px; } }  黑幕文字 可以直接参考：https://mogeko.me/posts/zh-cn/080/\n还有更多\u0026hellip; 甩链接，实在肝不动了Orz\n配置Waline评论 待更新\n特别鸣谢  Hugo 主题 MemE 文档   MemE主题的官方文档\n  Guan Qirui的个人博客源代码   config.toml可供参考\n  Guan Qirui的个人博客：荷戟独彷徨   建站笔记，包括Waline评论、短代码、今日诗词等\n  天涯共此时的meme主题优化   config.toml解读以及网络字体如何添加\n  Hugo theme stack主题 正确的魔改方式   stack主题的魔改教程，参考了加载进度条\n  Mogeko\u0026rsquo;s Blog   参考了短代码配置\n ","description":"","id":2,"section":"posts","tags":["Hugo"],"title":"Hugo | 记录MemE主题美化过程","uri":"http://blog.tantalum.life/posts/adjust-meme-theme/"},{"content":" 躺平者宣言\n福报将至，我从今开始躺平，至死方休。我将不结婚，不买房，不生子。我将不买包包，不戴名表。我将游手好闲，做一天阔以玩三天。我是工位上的摸鱼仔，城市中的流浪汉，是抵御消费主义的钝剑，划破内卷阴影的光线，是现代病的药到病除，是存在与不存在之万物的尺度。我将懒散与悠闲献给躺平人，今日如此，日日皆然。”\n 您好，这位人类，我是新世纪摸鱼战士Roelxy，欢迎来到我的技术博客。作为超高校级的鸽王，我的拿手技能是咕咕咕...   .spoiler { color: black; background-color: black; } .spoiler:hover { color: white; }  爱好是做一名善良的人类，整天幻想人类灭绝以此能终生躺平，平时会研究神秘学，最近在研究塔罗和利诺曼，看工口作品时会超速爬墙。同时附上我的文站地址，我的胡乱随笔都在那里。\n本站目前使用的主题是Zzo，曾使用MemE主题（现文站主题），使用Hugo进行页面渲染，评论功能基于Waline，是老牌评论系统Valine的安全改良版，这里给出官方文档。MemE非常专注内容，而Zzo提供了很多代码及短代码样式，这样安排再合适不过。为了给站点增添一些文学色彩，我为文站的页脚调用今日诗词 API以显示一句诗词。\n如果您想联系我，博客的评论系统有邮件通知功能，即使在游客状态下也可以发布评论，除非填写了错误的邮箱，否则您不会错过任何评论通知。您也可以选择在页脚中找到我的邮箱和Telegram帐号。如果您也是联邦宇宙(fedi)友邻的话，欢迎来关注我的Mastodon。\n那么，祝您旅途愉快！\n","description":"","id":3,"section":"","tags":null,"title":"About","uri":"http://blog.tantalum.life/about/"},{"content":"一些碎碎念 搭建自己的静态博客这件事，对我本人来说还没有什么真实感。不过既然都已经为了建站捣鼓了域名和服务器，那多一个blog（个人网站）也是完全可以预料到的事，更何况不是部署在服务器内的动态博客，而是只需要一台普通电脑就能搞定的静态博客。\n不过本鸽王之前打算用友邻搭建的pleroma实例写blog，理由是支持我最爱的BBCode，当然还有markdown和HTML。缺点是没有主页推荐和搜索功能，全靠我置顶嘟文那现实吗！后来我发现了Writefreely，凭借着简单的二进制文件安装方式和简约的白纸黑字视觉体验，我火速在服务器里搭建了个站，结果悲剧地发现——这货不支持BBCode，但胜在太简单了，简单到无需docker安装，于是被我压箱底了（。\n后来？其实当时只是想做一个静态网页的，连主题都不需要的居中显示的网页，但是Google一下发现好多用的都是wordpress动态博客（连在自己博客里加喜欢的脚本都要付费吗魂淡），又或是装好多依赖的静态博客。作为一个常年躺平人士这显然不合适（喂），于是我终于找到了不完全依赖本地又能轻松修改配置的博客搭建方式：Hugo静态网页渲染+Vercel网页托管自动部署+Github代码托管，主题截止目前敲定了MemE，可能以后会改，毕竟我连css全称是什么都不知道XDD\u0026hellip;\n嘛，总而言之我blog就是这样在机缘巧合之下诞生了，难道不值得おめでとう一下吗！\n这次不会也压箱底吧 大概\u0026hellip;不会的，不过我在冰水混合物的这篇博客里发现了Typecho，如果有机会的话我可能要尝试一下用这个搭建动态博客，到时候可能会选择性拆迁一个博客。所以\u0026hellip;结果谁知道呢。\nWritefreely那边我用来发长毛象运维教程了，这边的话目测会发更多奇奇怪怪的东西（？）反正也不会有人看，千万不要期待就没问题了！\n特别鸣谢 皮塔丘（ @Hydrangea@o3o.ca）的Hugo简明搭建笔记\n","description":"","id":4,"section":"posts","tags":["Hugo"],"title":"Hugo | 静态博客搭建有感","uri":"http://blog.tantalum.life/posts/after-building-a-static-blog/"}]