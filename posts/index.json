[{"content":"昨晚我走在路上的时候突然想到，随着时间推移，我喜欢的作品一定会变得越来越多，而我的藏书阁里目前仅使用了Tags和Categories的树状分类法，就算是个自留地，日后在博客内指名寻找某个作品一定是耗时的。如何解决这个问题，最佳方案就是为博客添加搜索功能。\n最开始我尝试的方案是安装搜索插件hugo-search-fuse-js。这是一个基于Fuse.js的主题插件，但不知为什么，search页面没有显示任何内容。正当我打算放弃的时候，我又发现了另一个简洁高效的搜索方案：Hugo Fast Search，不需要注册登录，没有抓取次数限制，最小依赖无需编译。\n5分钟给Hugo博客增加搜索功能  这位博主对搜索功能进行了客制化魔改：\n 允许通过点击页面空白处隐藏搜索框，而不是只能按Esc 在右上角添加了一个搜索按钮，方便不想按快捷键的人 默认的快捷键由于Firefox Linux默认 Super-/是 Quick Find 功能，因此改成了 Alt-/   开始配置 添加index.json 我使用的主题是已经被作者弃坑的Mogege，首先添加index.json文件到layouts/_default，内容如下：\n1 2 3 4 5  {{- $.Scratch.Add \u0026#34;index\u0026#34; slice -}} {{- range .Site.RegularPages -}} {{- $.Scratch.Add \u0026#34;index\u0026#34; (dict \u0026#34;title\u0026#34; .Title \u0026#34;tags\u0026#34; .Params.tags \u0026#34;categories\u0026#34; .Params.categories \u0026#34;contents\u0026#34; .Plain \u0026#34;permalink\u0026#34; .Permalink \u0026#34;date\u0026#34; .Date \u0026#34;section\u0026#34; .Section) -}} {{- end -}} {{- $.Scratch.Get \u0026#34;index\u0026#34; | jsonify -}}   修改配置文件config.toml 在主题配置文件中，添加：\n1 2  [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;]   添加js文件 添加fastsearch.js和fuse.min.js到static/js。fuse.min.js可从Releases页面下载source code后解压进入dist文件夹就能找到。fastsearch.js内容如下：\nvar fuse; // holds our search engine var fuseIndex; var searchVisible = false; var firstRun = true; // allow us to delay loading json data unless search activated var list = document.getElementById(\u0026#39;searchResults\u0026#39;); // targets the \u0026lt;ul\u0026gt; var first = list.firstChild; // first child of search list var last = list.lastChild; // last child of search list var maininput = document.getElementById(\u0026#39;searchInput\u0026#39;); // input box for search var resultsAvailable = false; // Did we get any search results?  // ========================================== // The main keyboard event listener running the show // document.addEventListener(\u0026#39;keydown\u0026#39;, function(event) { // CMD-/ to show / hide Search  if (event.altKey \u0026amp;\u0026amp; event.which === 191) { // Load json search index if first time invoking search  // Means we don\u0026#39;t load json unless searches are going to happen; keep user payload small unless needed  doSearch(event) } // Allow ESC (27) to close search box  if (event.keyCode == 27) { if (searchVisible) { document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;hidden\u0026#34;; document.activeElement.blur(); searchVisible = false; } } // DOWN (40) arrow  if (event.keyCode == 40) { if (searchVisible \u0026amp;\u0026amp; resultsAvailable) { console.log(\u0026#34;down\u0026#34;); event.preventDefault(); // stop window from scrolling  if ( document.activeElement == maininput) { first.focus(); } // if the currently focused element is the main input --\u0026gt; focus the first \u0026lt;li\u0026gt;  else if ( document.activeElement == last ) { last.focus(); } // if we\u0026#39;re at the bottom, stay there  else { document.activeElement.parentElement.nextSibling.firstElementChild.focus(); } // otherwise select the next search result  } } // UP (38) arrow  if (event.keyCode == 38) { if (searchVisible \u0026amp;\u0026amp; resultsAvailable) { event.preventDefault(); // stop window from scrolling  if ( document.activeElement == maininput) { maininput.focus(); } // If we\u0026#39;re in the input box, do nothing  else if ( document.activeElement == first) { maininput.focus(); } // If we\u0026#39;re at the first item, go to input box  else { document.activeElement.parentElement.previousSibling.firstElementChild.focus(); } // Otherwise, select the search result above the current active one  } } }); // ========================================== // execute search as each character is typed // document.getElementById(\u0026#34;searchInput\u0026#34;).onkeyup = function(e) { executeSearch(this.value); } document.querySelector(\u0026#34;body\u0026#34;).onclick = function(e) { if (e.target.tagName === \u0026#39;BODY\u0026#39; || e.target.tagName === \u0026#39;DIV\u0026#39;) { hideSearch() } } document.querySelector(\u0026#34;#search-btn\u0026#34;).onclick = function(e) { doSearch(e) } function doSearch(e) { e.stopPropagation(); if (firstRun) { loadSearch() // loads our json data and builds fuse.js search index  firstRun = false // let\u0026#39;s never do this again  } // Toggle visibility of search box  if (!searchVisible) { showSearch() // search visible  } else { hideSearch() } } function hideSearch() { document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;hidden\u0026#34; // hide search box  document.activeElement.blur() // remove focus from search box  searchVisible = false } function showSearch() { document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;visible\u0026#34; // show search box  document.getElementById(\u0026#34;searchInput\u0026#34;).focus() // put focus in input box so you can just start typing  searchVisible = true } // ========================================== // fetch some json without jquery // function fetchJSONFile(path, callback) { var httpRequest = new XMLHttpRequest(); httpRequest.onreadystatechange = function() { if (httpRequest.readyState === 4) { if (httpRequest.status === 200) { var data = JSON.parse(httpRequest.responseText); if (callback) callback(data); } } }; httpRequest.open(\u0026#39;GET\u0026#39;, path); httpRequest.send(); } // ========================================== // load our search index, only executed once // on first call of search box (CMD-/) // function loadSearch() { console.log(\u0026#39;loadSearch()\u0026#39;) fetchJSONFile(\u0026#39;/index.json\u0026#39;, function(data){ var options = { // fuse.js options; check fuse.js website for details  shouldSort: true, location: 0, distance: 100, threshold: 0.4, minMatchCharLength: 2, keys: [ \u0026#39;permalink\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;tags\u0026#39;, \u0026#39;contents\u0026#39; ] }; // Create the Fuse index  fuseIndex = Fuse.createIndex(options.keys, data) fuse = new Fuse(data, options, fuseIndex); // build the index from the json file  }); } // ========================================== // using the index we loaded on CMD-/, run // a search query (for \u0026#34;term\u0026#34;) every time a letter is typed // in the search box // function executeSearch(term) { let results = fuse.search(term); // the actual query being run using fuse.js  let searchitems = \u0026#39;\u0026#39;; // our results bucket  if (results.length === 0) { // no results based on what was typed into the input box  resultsAvailable = false; searchitems = \u0026#39;\u0026#39;; } else { // build our html  // console.log(results)  permalinks = []; numLimit = 5; for (let item in results) { // only show first 5 results  if (item \u0026gt; numLimit) { break; } if (permalinks.includes(results[item].item.permalink)) { continue; } // console.log(\u0026#39;item: %d, title: %s\u0026#39;, item, results[item].item.title)  searchitems = searchitems + \u0026#39;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39; + results[item].item.permalink + \u0026#39;\u0026#34; tabindex=\u0026#34;0\u0026#34;\u0026gt;\u0026#39; + \u0026#39;\u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;\u0026#39; + results[item].item.title + \u0026#39;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;; permalinks.push(results[item].item.permalink); } resultsAvailable = true; } document.getElementById(\u0026#34;searchResults\u0026#34;).innerHTML = searchitems; if (results.length \u0026gt; 0) { first = list.firstChild.firstElementChild; // first result container — used for checking against keyboard up/down location  last = list.lastChild.firstElementChild; // last result container — used for checking against keyboard up/down location  } }   添加HTML代码到主题里 我将代码添加到/layouts/partials/header.html，也可以在layouts/_default/baseof.html添加：\n1 2 3 4 5 6 7 8 9 10  \u0026lt;!-- 在menu-item代码段下（对应博客菜单栏后）添加--\u0026gt; \u0026lt;a id=\u0026#34;search-btn\u0026#34; style=\u0026#34;display: inline-block;\u0026#34; href=\u0026#34;javascript:void(0);\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-angle-down\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;div id=\u0026#34;fastSearch\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;searchInput\u0026#34; tabindex=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;ul id=\u0026#34;searchResults\u0026#34;\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   i标签调用了免费的Font Awesome图标。如果没有用过这套图标请看这篇博客。我在这里用的图标是下标(angle-down)，效果请去这里查看。\n当然你也可以使用自己喜欢的图标，我试用过搜索(search)，羽毛笔(feather-alt)，纸飞机(paper-plane)，左引号(quote-left)和对话框(discourse)都还不错，甚至把调用图标这一动作改为插入文字都没问题，将\u0026lt;i class=\u0026quot;fas fa-iconname\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;改为\u0026lt;span\u0026gt;这里填写你想显示的文字\u0026lt;/span\u0026gt;，例如\u0026lt;span\u0026gt;search\u0026lt;/span\u0026gt;即可。\n在主题模板上引用js 我使用的主题有一个专门引用js的模板，所以我选择在此添加引用。在/layouts/partials/js.html(有的主题是/layouts/partials/scripts.html)添加：\n1 2 3  \u0026lt;!-- Fastsearch --\u0026gt; \u0026lt;script src=\u0026#34;/js/fuse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/js/fastsearch.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   添加CSS样式 CSS样式来自老麦，我喜欢这个颜色，自认为与Mogege主题很合，没有进行改动。\n尽量选择对应的模板来添加，比如说我是在header里修改的，那么我在/assets/css/_common/_partial/header.scss添加CSS样式。也可以修改模板的主CSS文件，通常是style.css或main.css。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  #fastSearch { visibility: hidden; position: absolute; right: 0px; top: 30px; display: inline-block; width: 320px; margin: 0 10px 0 0; padding: 0; } #fastSearch input { padding: 4px; width: 100%; height: 31px; font-size: 1em; color: #465373; font-weight: bold; background-color: #95B0F4; border-radius: 3px 3px 0px 0px; border: none; outline: none; text-align: left; display: inline-block; } #fastSearch ul { list-style: none; margin: 0px; padding: 0px; } #searchResults li { list-style: none; margin-left: 0em; background-color: #E1E7F7; border-bottom: 1px dotted #465373; } #searchResults li .title { font-size: .9em; margin: 0; display: inline-block; } #searchResults { visibility: inherit; display: inline-block; width: 328px; margin: 0; max-height: calc(100vh - 120px); overflow: hidden; } #searchResults a { text-decoration: none !important; padding: 10px; display: inline-block; width: 100%; } #searchResults a:hover, #searchResults a:focus { outline: 0; background-color: #95B0F4; color: #fff; } #search-btn { position: sticky; font-size: 20px; }   可以自己稍作调整。\n配置好后，运行hugo server -D就可以在本地预览效果了。\n","description":"","id":0,"section":"posts","tags":["Hugo"],"title":"Hugo | 为Mogege主题添加搜索功能","uri":"http://blog.tantalum.life/posts/hugo-fast-search/"},{"content":"为什么会有这篇文章 实际上，我正在尝试将喜欢的内容直接呈现在博客上，没错这里指的就是我的藏书阁。然而作为小白，虽然我有能力像markdown一样使用html语法写完一篇文章，但在hugo博客里嵌入视频这种事\u0026hellip;如果直接在.md文件里用html标签，第一有安全隐患，第二完全没有效果。不仅是\u0026lt;video\u0026gt;标签，还是\u0026lt;iframe\u0026gt;标签，我试过的代码在本地预览通通不行，反而在码字软件Typora里跑得很畅快\u0026hellip;（摊手。\n但我还是想把喜欢的视频嵌入到博客中，而不是单纯甩个链接，故有此文。\n先放出我的参考代码 参见Mogeko的利用 Hugo Shortcodes 插入 B 站视频。我将css代码放到html文件，全部代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  {{ $videoID := index .Params 0 }} {{ $pageNum := index .Params 1 | default 1}} {{ if (findRE \u0026#34;^[bB][vV][0-9a-zA-Z]+$\u0026#34; $videoID) }} \u0026lt;div\u0026gt;\u0026lt;iframe id=\u0026#34;biliplayer\u0026#34; src=\u0026#34;//player.bilibili.com/player.html?bvid={{ $videoID }}\u0026amp;page={{ $pageNum }}\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34; loading=\u0026#34;lazy\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt;\u0026lt;/div\u0026gt; {{ else }} \u0026lt;div\u0026gt;\u0026lt;iframe id=\u0026#34;biliplayer\u0026#34; src=\u0026#34;//player.bilibili.com/player.html?aid={{ $videoID }}\u0026amp;page={{ $pageNum }}\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34; loading=\u0026#34;lazy\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt;\u0026lt;/div\u0026gt; {{ end }} \u0026lt;style\u0026gt; // 嵌入 BiliBili 视频 #bilibili { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #bilibili { width: 100%; height: 250px; } } \u0026lt;/style\u0026gt;   此代码中嵌入视频的窗口大小根据屏幕大小动态调整这一功能真的好用，我都是借（照）鉴（抄）的这个，感恩。\n利用 Hugo Shortcodes 插入pornhub视频 在layouts/shortcode文件夹中创建文件pornhub.html，添加代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;div\u0026gt;\u0026lt;iframe id=\u0026#34;pornhub-player\u0026#34; src=\u0026#34;https://www.pornhub.com/embed/{{ index .Params 0 }}\u0026#34; scrolling=\u0026#34;no\u0026#34; frameborder=\u0026#34;no\u0026#34; allowfullscreen=\u0026#34;true\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; // 嵌入pornhub视频 #pornhub-player { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #pornhub-player { width: 100%; height: 250px; } } \u0026lt;/style\u0026gt;   由于视频播放源是黄黑P站，而这里是Techblog，我就不放预览了。想看NSFW视频嵌入效果的话请看这里。可以看出他工作得很好！另外，这也是我人生的第一个代码。\n用法：找到你喜欢的porn，复制链接中embed/后的内容，例如ph5eca50fd553e5，然后在markdown中输入\n1  {{\u0026lt; pornhub ph5eca50fd553e5 \u0026gt;}}   利用 Hugo Shortcodes 插入个人版onedrive中的视频 参考：Embedding Videos from OneDrive into your Blog。我借鉴了此文中使用video标签而放弃iframe标签的做法。\n首先复制onedrive提供的内嵌代码，比如文中的例子：\n1  \u0026lt;iframe src=\u0026#34;https://onedrive.live.com/embed?cid=A82DFC6ED9776AF4\u0026amp;resid=A82DFC6ED9776AF4%212082\u0026amp;authkey=AMCIqSB8zNNJvxM\u0026#34; width=\u0026#34;320\u0026#34; height=\u0026#34;185\u0026#34; frameborder=\u0026#34;0\u0026#34; scrolling=\u0026#34;no\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt;   然后将src的值改为\u0026quot;https://onedrive.live.com/download?cid=A82DFC6ED9776AF4\u0026amp;resid=A82DFC6ED9776AF4%212082\u0026amp;authkey=AMCIqSB8zNNJvxM\u0026quot;，即替换掉embed将其变更为download。\n 值得一提的是，onedrive仅为个人版提供了内嵌代码功能，而企业版教育版等等都没有这个功能。为了将喜欢的r18视频嵌入博客中，我将视频从教育版onedrive中下载并上传至个人版（我好闲。\n 观察src链接后半段的组成部分，分为cid，resid和authkey，其中resid的值中间插入了一个%。我试着将redis看成一个整体，但失败了，总是提示有编码错误。因为我是小白，不太了解其中原理，于是干脆将resid部分定义为两个变量：左半段resid1和右半段resid2。\n在layouts/shortcode文件夹中创建文件onedrive.html，添加代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  {{ $cid := index .Params 0 }} {{ $resid1 := index .Params 1 }} {{ $resid2 := index .Params 2 }} {{ $authkey := index .Params 3 }} \u0026lt;div\u0026gt;\u0026lt;video id=\u0026#34;onedrive-player\u0026#34; src=\u0026#34;https://onedrive.live.com/download?cid={{ $cid }}\u0026amp;resid={{ $resid1 }}%{{ $resid2 }}\u0026amp;authkey={{ $authkey }}\u0026#34; type=\u0026#34;video/mp4\u0026#34; scrolling=\u0026#34;no\u0026#34; frameborder=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/video\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; // 嵌入onedrive视频 #onedrive-player { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #onedrive-player { width: 100%; height: 250px; } } \u0026lt;/style\u0026gt;   用法：还是用参考文章的例子，在markdown中输入\n1  {{\u0026lt; onedrive A82DFC6ED9776AF4 A82DFC6ED9776AF4 212082 AMCIqSB8zNNJvxM \u0026gt;}}   缺点是移动端只能长按下载不能在线播放，电脑可以右键播放暂停静音下载。\n","description":"","id":1,"section":"posts","tags":["Hugo","HTML"],"title":"NSFW | 实现在Hugo博客中利用Shortcode嵌入视频","uri":"http://blog.tantalum.life/posts/shortcode-to-insert-video/"},{"content":"\u0026ldquo;taxonomy\u0026rdquo; failed  博客渲染失败 #335\n 错误提示：\nError: Error building site: failed to render pages: render of \u0026quot;taxonomy\u0026quot; failed 解决方案：\n原因是 Front matter categories 的类型是数组，所以在文章中，需要写成（YAML 格式为例）\ncategories: [Meta] # 或者 categories: - Meta # 而不是 categories: Meta Character U+003D  更换主题至meme后出现以下错误 #355\n 错误提示：\n参考资料：\n解决方案：\nU+003D是=号。\n这是你的 Front Matter 的语法问题，如果你要使用 TOML，请将:替换为=\n或者使用 YAML 格式，将+++替换为---。\n","description":"","id":2,"section":"posts","tags":["Hugo"],"title":"Hugo | 更换主题后Front matter导致Build Error","uri":"http://blog.tantalum.life/posts/fix-front-matter/"},{"content":"因为Mogege主题好看到犯规，所以我把文站主题从MemE换成了Mogege\u0026hellip;\n非常对不起自家男孩子！！！本来Mogege是要给他用的\u0026hellip; ANY_ME 的Hugo 博客自定义优化  添加TOC目录 在主题文件 /themes/Mogege/assets/css/_common/home.scss内添加 toc 样式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  .post-toc { position: absolute; width: 200px; margin-left: 780px; padding: 10px; word-wrap: break-word; box-sizing: border-box; .post-toc-title { margin: 0; font-weight: 400; text-transform: uppercase; } .post-toc-content { \u0026amp;.always-active ul { display: block; } \u0026gt;nav\u0026gt;ul { margin: 10px 0; } ul { padding-left: 0; list-style: none; ul { padding-left: 15px; display: none; } .has-active \u0026gt; ul { display: block; } } } a:hover { color: #c05b4d; -webkit-transform: scale(1.1); -ms-transform: scale(1.1); transform: scale(1.1); } a { display: block; line-height: 30px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; -webkit-transition-duration: .2s; transition-duration: .2s; -webkit-transition-property: -webkit-transform; transition-property: -webkit-transform; transition-property: transform; transition-property: transform,-webkit-transform; -webkit-transition-timing-function: ease-out; transition-timing-function: ease-out; } } @media only screen and (max-width: 1224px) { .post-toc { display: none; } }   在主题路径/themes/Mogege/layouts/partials/下新建toc.html文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  \u0026lt;div class=\u0026#34;post-toc\u0026#34; id=\u0026#34;post-toc\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;post-toc-title\u0026#34;\u0026gt;{{ T \u0026#34;toc\u0026#34; }}\u0026lt;/h2\u0026gt; {{ $globalAutoCollapseToc := .Site.Params.autoCollapseToc | default false }} \u0026lt;div class=\u0026#34;post-toc-content{{ if not (or .Params.autoCollapseToc (and $globalAutoCollapseToc (ne .Params.autoCollapseToc false))) }} always-active{{ end }}\u0026#34;\u0026gt; {{.TableOfContents}} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; window.onload = function () { var fix = $(\u0026#39;.post-toc\u0026#39;); var end = $(\u0026#39;.post-comment\u0026#39;); var fixTop = fix.offset().top, fixHeight = fix.height(); var endTop, miss; var offsetTop = fix[0].offsetTop; $(window).scroll(function () { var docTop = Math.max(document.body.scrollTop, document.documentElement.scrollTop); if (end.length \u0026gt; 0) { endTop = end.offset().top; miss = endTop - docTop - fixHeight; } if (fixTop \u0026lt; docTop) { fix.css({ \u0026#39;position\u0026#39;: \u0026#39;fixed\u0026#39; }); if ((end.length \u0026gt; 0) \u0026amp;\u0026amp; (endTop \u0026lt; (docTop + fixHeight))) { fix.css({ top: miss }); } else { fix.css({ top: 0 }); } } else { fix.css({ \u0026#39;position\u0026#39;: \u0026#39;absolute\u0026#39; }); fix.css({ top: offsetTop }); } }) } \u0026lt;/script\u0026gt;   在主题文件 /themes/Mogege/layouts/_default/single.html内\u0026lt;/header\u0026gt;标签后引入 toc 模板：\n1 2 3  {{ if ( .Site.Params.toc | default true ) }} {{ partial \u0026#34;toc.html\u0026#34; . }} {{ end }}   配置文件config.toml中添加如下代码：\n1 2  toc = true # 是否开启目录 autoCollapseToc = true # Auto expand and collapse toc   开启头像转动 在 \\themes\\mogege\\assets\\css\\_common\\_partials\\home.scss第32行更改：\n1  transform:translateY(-0.75em) rotate(360deg);   鼠标点击特效和蜘蛛网特效 在\\themes\\mogege\\layouts\\partials\\js.html中添加：\n1 2 3  \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/ITJoker233/ITJoker233.github.io@latest/CDN/js/love.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://demo.hellozwh.com/source/canvas-nest.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   添加 Font Awesome 图标 在Font Awesome 官网注册帐号。注册成功后会显示帐号中有一套免费图标。然后获取HTML代码，在/themes/mogege/layouts/partials/head.html中粘贴代码。\n用法：后面将使用 \u0026lt;i class=\u0026quot;fab fa-iconname\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; 或者 \u0026lt;i class=\u0026quot;fas fa-iconname\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;，iconname是想要插入的图标名。\n更改上下篇文章的图标 在/themes/Mogege/layouts/_default/single.html的post-nav部分（需要 FontAwesome 支持）\n将\u0026lt;i class=\u0026quot;iconfont icon-left\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;更改为 \u0026lt;i class=\u0026quot;fas fa-caret-left\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;。\n将\u0026lt;i class=\u0026quot;iconfont icon-right\u0026quot;\u0026gt;更改为\u0026lt;i class=\u0026quot;fas fa-caret-right\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;。\n右下角添加到顶部按钮和进度比例 先定义文本框文件，在\\themes\\mogege\\assets\\css\\_common\\_core\\layout.scss添加如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  /** 进度比例和到顶部**/ .back-to-top { box-sizing: border-box; border-radius: 8px; /** 圆角**/ position: fixed; right: 30px; z-index: 1050; padding: 0 6px; width: initial; background: #222; font-size: 12px; opacity: 0.6; color: #fff; cursor: pointer; text-align: center; transition-property: bottom; transition-duration: 0.2s; transition-timing-function: ease-in-out; transition-delay: 0s; bottom: -40px; } .back-top-active { bottom: 30px; } @media (max-width: 767px) { .back-to-top { right: 10px; } .back-top-active { bottom: 10px; } }   然后在\\themes\\mogege\\layouts\\partials\\footer.html中更改底部显示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82  \u0026lt;!-- 此处更改过 --\u0026gt; \u0026lt;div class=\u0026#34;footer-box\u0026#34;\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;copyright\u0026#34;\u0026gt; \u0026amp;copy; {{ with .Site.Params.since }} \u0026lt;span itemprop=\u0026#34;copyrightYear\u0026#34;\u0026gt;{{.}} - {{ now.Year }}\u0026lt;/span\u0026gt; {{ end }} \u0026lt;span class=\u0026#34;with-love\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;iconfont icon-love\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/span\u0026gt; {{ if .Site.Params.author }} \u0026lt;span class=\u0026#34;author\u0026#34; itemprop=\u0026#34;copyrightHolder\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ .Site.BaseURL }}\u0026#34;\u0026gt;{{ .Site.Params.author }}\u0026lt;/a\u0026gt; | \u0026lt;/span\u0026gt; {{ end }} {{ with .Site.Params.beian }} \u0026lt;a href=\u0026#34;http://www.miibeian.gov.cn/\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;external nofollow\u0026#34;\u0026gt;{{ . }} \u0026lt;/a\u0026gt; | {{ end }} \u0026lt;span\u0026gt;Powered by \u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;external nofollow\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt; \u0026amp; \u0026lt;a href=\u0026#34;https://github.com/Mogeko/Mogege\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;external nofollow\u0026#34;\u0026gt;Mogege\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/footer\u0026gt; {{ partial \u0026#34;js.html\u0026#34; . }} \u0026lt;!-- 设置滚动条和进度比例 --\u0026gt; \u0026lt;div class=\u0026#34;back-to-top\u0026#34; id=\u0026#34;back_to_top\u0026#34;\u0026gt; \u0026lt;!-- 箭头--\u0026gt; \u0026lt;!-- https://www.toptal.com/designers/htmlarrows/--\u0026gt; \u0026lt;!-- 箭头 \u0026lt;span\u0026gt;\u0026amp;#8593;\u0026lt;/span\u0026gt; --\u0026gt; \u0026lt;span\u0026gt;\u0026lt;i class=\u0026#34;fas fa-arrow-up\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 需要FontAwesome支持，参见文末--\u0026gt; \u0026lt;!-- 进度比例 --\u0026gt; \u0026lt;span class=\u0026#34;scrollpercent\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;back_to_top_text\u0026#34;\u0026gt;0\u0026lt;/span\u0026gt;% \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; let sideBarOpen = \u0026#39;sidebar-open\u0026#39;; let body = document.body; let back2Top = document.querySelector(\u0026#39;#back_to_top\u0026#39;), back2TopText = document.querySelector(\u0026#39;#back_to_top_text\u0026#39;), drawerBox = document.querySelector(\u0026#39;#drawer_box\u0026#39;), rightSideBar = document.querySelector(\u0026#39;.sidebar\u0026#39;), viewport = document.querySelector(\u0026#39;body\u0026#39;); function scrollAnimation(currentY, targetY) { let needScrollTop = targetY - currentY let _currentY = currentY setTimeout(() =\u0026gt; { const dist = Math.ceil(needScrollTop / 10) _currentY += dist window.scrollTo(_currentY, currentY) if (needScrollTop \u0026gt; 10 || needScrollTop \u0026lt; -10) { scrollAnimation(_currentY, targetY) } else { window.scrollTo(_currentY, targetY) } }, 1) } back2Top.addEventListener(\u0026#34;click\u0026#34;, function (e) { scrollAnimation(document.scrollingElement.scrollTop, 0); e.stopPropagation(); return false; }); window.addEventListener(\u0026#39;scroll\u0026#39;, function (e) { let percent = document.scrollingElement.scrollTop / (document.scrollingElement.scrollHeight - document.scrollingElement.clientHeight) * 100; if (percent \u0026gt; 1 \u0026amp;\u0026amp; !back2Top.classList.contains(\u0026#39;back-top-active\u0026#39;)) { back2Top.classList.add(\u0026#39;back-top-active\u0026#39;); } if (percent == 0) { back2Top.classList.remove(\u0026#39;back-top-active\u0026#39;); } if (back2TopText) { back2TopText.textContent = Math.floor(percent); } }); let hasCacu = false; window.onresize = function () { calcuHeight(); } \u0026lt;/script\u0026gt;   ","description":"","id":3,"section":"posts","tags":["Hugo"],"title":"Hugo | 记录Mogege主题美化过程","uri":"http://blog.tantalum.life/posts/adjust-mogege-theme/"},{"content":"背景提要 给自家男孩子搭博客的时候我向他推荐了Mogeko二次开发的Mogege主题（基于Leavelt主题，现已被作者弃坑）。虽然Mogege主题也被弃坑了，但是简洁好用，去掉了很多实用性不高的功能，而且配置文件有部分汉化，相当适合小白。\n但另一方面，当时Mogege的作者正在使用Gitalk。虽然现在由于安全问题已经改用Utterances了，但依旧没有在Mogege主题中显现出来，这就直接导致了config.toml中开箱即用的评论系统只有Gitalk，而Disqus和Utterances虽然在html文件中有所体现，但都没有出现在主题配置文件中，更可怜的Disqus连自己的html都没有\u0026hellip;实际上LeaveIt的作者似乎没有为主题添加评论功能。\n选择Utteranc评论系统的原因 基于 github issues 的评论系统，比较流行的有gitment和gitalk，因为使用的是 GitHub Issue 的 api，不依赖任何第三方平台，而是直接和github仓库绑在一起。言外之意，只要Github不倒闭，你的评论系统就不会被关闭。缺点就是若要登录Github对博客进行评论，索要权限实在过多，而且似乎没有将权限减少的意思，风险确实可能达到能让不怀好意之人通过OAuth冒充登录帐号并删库跑路的程度。\n虽然我自己的博客使用的是无后端的Waline评论系统，但是鉴于我已经在Mogege主题仓库中看到Utterances相关的代码了，而且好巧不巧男孩子的Vercel帐号被风控暂时无法登录，机缘巧合下我接触了这款无追踪不保留数据的开源评论系统。\n简单的安装步骤  似乎有一个有基于其版本开发的中文版：beaudar，我没有用这个。\n 在Github中新建一个公开可见的仓库专门用来存放评论，比如名叫Utterances，然后安装Utterances，配置它允许调用的仓库。建议只选择这个新建的Utterances仓库而不是全部仓库。如果想对他的调用权限进行更改，可以去github中的应用页面，点击Utterances右边的Configuration就能更改权限了。\n安装后在新的页面中填写你的repo，格式为Username/Utterances，然后预览并选择你喜欢的主题，系统会在下面自动为你提供一个client.js，里面有四个变量分别是repo，issue-term，thheme和·crossorigin，先记下来不要动。\n更改配置文件 根据Mogege主题的github仓库，在这里，也就是layouts/partials/utteranc.html，可以发现这里已经引用了{{ .Site.Params.Utteranc.repo }}（以repo为例）。而在这个html文件的103行又引用了{{ else if .Site.Params.enableUtteranc }}和utteranc.html，所以在config.toml文件的最后添加：\n1 2 3 4 5  [params.utteranc] # Homepage: https://utteranc.es repo = \u0026#34;你的repo\u0026#34; # The repo to store comments issueTerm = \u0026#34;你的issueTerm\u0026#34; # the mapping between blog posts and GitHub issues.  theme = \u0026#34;你选择的主题\u0026#34; # Theme crossorigin = \u0026#34;anonymous\u0026#34; # default: anonymous   这样做还没完，继续在config.toml的[params]部分找到enableGitalk = true，在下一行添加：enableUtteranc = true。\n之后刷新浏览器，就可以快乐地谈笑风生了！\n","description":"","id":4,"section":"posts","tags":["Hugo","Utterances"],"title":"Hugo | 为Mogege主题添加Utterances评论","uri":"http://blog.tantalum.life/posts/add-utterances-for-mogege/"},{"content":"为什么要水这篇文章 给博客换主题的时候发现MemE主题和Zzo主题的评论配置文件有出入，不能直接套用现有的MemE主题Waline配置。所以我灵机一动：要不我自己搞吧。\n以MemE,Zzo和stack三个主题为例，看一下不同主题的评论配置有什么不同：\n首先看一下MemE主题的评论配置 MemE主题支持Valine，因为Waline是Valine的改良版，所以可以互相参考配置。首先主题的github项目中搜索Valine，可以看到除了config-examples/zh-cn/config.toml（主题的简体配置文件，这里不考虑繁体中文和英文，只是配置文件的语言项）以外，还有三个文件提到了Valine，分别是layouts/partials/third-party/valine.html，layouts/partials/third-party/script.html和layouts/partials/components/comments.html。\n各文件的作用：\n comments.html文件的作用是控制是否开启评论（enableComments），开启哪个评论系统（enableValine），如果开启，则插入相关评论的\u0026lt;div\u0026gt;标签 id； script.html文件的作用是载入开启的评论的相应 HTML 文件（valine.html）； valine.html文件的作用是调用valine.js，对评论功能进行设定。  再来来看一下Zzo主题的评论配置 同样在MemE在github项目中搜索Valine，可以看到除了config/_default/params.toml（主题的配置文件之一，Zzo主题把正常的config.toml分成了四个，params.toml是其中一个）以外，还有两个文件：layouts/partials/comments/valine.html和layouts/partials/comments/comments.html。\n各文件的作用：\n comments.html文件的作用是控制是否开启评论（enableComments），开启哪个评论系统（enableValine），如果开启，则直接载入开启的评论的相应 HTML 文件（valine.html）； valine.html文件的作用是对评论功能进行设定。  这样一来，Zzo就不用像MemE一样需要script.html文件专门用来载入valine.html，因为功能被合并了。\n附加题：看看同样美貌的stack主题！ stack主题支持Waline而不支持Valine，这是我万万没想到的（笑）。同样地，首先在项目中搜索Waline，发现除了config.yaml（stack主题的配置文件，和config.toml是一个东西）以外只有layouts/partials/comments/provider/waline.html提到了Waline，而且在文件中强制插入\u0026lt;div\u0026gt;标签 id，并且也对评论功能进行设定。\nWaline是什么，为什么说他是Valine的改良版 请看这篇博客。简而言之就是Gitalk 和 Valine都有一定的安全隐患，于是Waline诞生了。\n部署Waline 按照Waline官方文档快速开始。\n第一步推荐使用 LeanCloud 国际版，因为国内版还需要和备案的域名绑定，很是麻烦。第二步利用Vercel部署Waline，点击官方给出的快速部署链接，也就是那个deploy蓝色按钮，然后按照官方文档继续部署，直到你获得ServerURL，也就是服务端地址。\n 题外话：有段时间Waline的快速部署链接失效，因为github仓库的主分支由master改为main，而快速部署链接还没来得及修改，因此clone project会出现错误，现在已经没问题了。\n 你也可以为这个Vercel项目添加一个子域名。另外还要注意，每次更改环境变量之后都要Redeploy（重新部署）使改动生效。\n开始配置吧 修改配置文件 以Zzo主题为例，回到本地的博客根目录，在config/_default/params.toml中，打开评论全局设置，然后找到Valine的配置，按照Valine的格式在他的下方抄一份Waline的配置，比如我的如下：\n1 2 3 4 5 6 7 8 9  [waline] enable = false appId = \u0026#39;你的appId\u0026#39; appKey = \u0026#39;你的appKey\u0026#39; notify = false # mail notifier , https://github.com/xCss/Valine/wiki verify = false # Verification code avatar = \u0026#39;mm\u0026#39; placeholder = \u0026#39;说点什么吧...\u0026#39; visitor = false   但是这些配置项是valine需要的，而不一定是waline需要的。根据官方文档给出的前端配置，我对params.toml进行了改动，最后的配置如下：\n1 2 3 4 5 6 7 8 9 10 11  [Waline] enable = true ServerURL = \u0026#34;你的ServerURL\u0026#34; Placeholder = \u0026#34;ヾﾉ≧∀≦)o来评论啊!\u0026#34; #留言框占位提示文字 Avatar = \u0026#34;mp\u0026#34; Meta = [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;, \u0026#34;link\u0026#34;] PageSize = 10 Lang = \u0026#34;zh-CN\u0026#34; Highlight = true AvatarCDN = \u0026#34;https://cdn.v2ex.com/gravatar/\u0026#34; #waline的评论头像可以使用某种样式也可以使用cdn，这里用v2ex的cdn RequiredFields = [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;]   进入Zzo主题文件夹，找到之前说过的两个和Valine有关的文件，也就是layouts/partials/comments/valine.html和layouts/partials/comments/comments.html，把他们两个复制到~/layouts/partials/comments/valine.html和~/layouts/partials/comments/comments.html中（博客根目录下）。\nValine是你的模板，Waline要长得和他一模一样 将valine.html重命名为waline.html用visual studio打开，看一下这个文件长什么样：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  {{- if .Site.Params.valine.visitor -}} \u0026lt;span id=\u0026#34;{{ .RelPermalink | relLangURL }}\u0026#34; class=\u0026#34;leancloud_visitors\u0026#34; data-flag-title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;post-meta-item-text\u0026#34;\u0026gt;文章阅读量 \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;leancloud-visitors-count\u0026#34;\u0026gt;0\u0026lt;/span\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/span\u0026gt; {{- end }} \u0026lt;div id=\u0026#34;vcomments\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdn1.lncld.net/static/js/3.0.4/av-min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;//unpkg.com/valine/dist/Valine.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; new Valine({ el: \u0026#39;#vcomments\u0026#39; , appId: \u0026#39;{{ .Site.Params.valine.appId }}\u0026#39;, appKey: \u0026#39;{{ .Site.Params.valine.appKey }}\u0026#39;, notify: {{ .Site.Params.valine.notify }}, verify: {{ .Site.Params.valine.verify }}, avatar:\u0026#39;{{ .Site.Params.valine.avatar }}\u0026#39;, placeholder: \u0026#39;{{ .Site.Params.valine.placeholder }}\u0026#39;, visitor: {{ .Site.Params.valine.visitor }} }); \u0026lt;/script\u0026gt;   以appId为例，有些主题的valine.html文件会写成appId: '{{ .Site.Params.valineappId }}'或者更奇怪的，但一定要记住这个格式，因为要和他的格式完全对应。\n删掉所有代码，修改为官方文档给出的代码：\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;//cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; Waline({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;https://your-domain.vercel.app\u0026#39;, }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;   将serverURL的值修改为'{{ .Site.Params.waline.serverURL }}'，然后打开params.toml，根据之前添加的项，在serverURL的下一行继续添加：\n1 2 3 4 5 6 7 8  placeholder: \u0026#39;{{ .Site.Params.waline.Placeholder }}\u0026#39;, avatar: \u0026#39;{{ .Site.Params.waline.Avatar }}\u0026#39;, meta: {{ .Site.Params.waline.Meta }}, pageSize: {{ .Site.Params.waline.PageSize }}, lang: \u0026#39;{{ .Site.Params.waline.Lang }}\u0026#39;, highlight: {{ .Site.Params.waline.Highlight }}, avatarCDN: \u0026#39;{{ .Site.Params.waline.AvatarCDN }}\u0026#39;, requiredFields: {{ .Site.Params.waline.RequiredFields }}   最后，我的waline.html是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;//cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; Waline({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;{{ .Site.Params.waline.ServerURL }}\u0026#39;, placeholder: \u0026#39;{{ .Site.Params.waline.Placeholder }}\u0026#39;, avatar: \u0026#39;{{ .Site.Params.waline.Avatar }}\u0026#39;, meta: {{ .Site.Params.waline.Meta }}, pageSize: {{ .Site.Params.waline.PageSize }}, lang: \u0026#39;{{ .Site.Params.waline.Lang }}\u0026#39;, highlight: {{ .Site.Params.waline.Highlight }}, avatarCDN: \u0026#39;{{ .Site.Params.waline.AvatarCDN }}\u0026#39;, requiredFields: {{ .Site.Params.waline.RequiredFields }} }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;   打开comments.html,找到valine那段代码，复制一下放到他的下面，并把valine改为waline，大概是这样：\n1 2 3 4 5 6 7 8  {{ else if $.Param \u0026#34;valine.enable\u0026#34; }} {{ partial \u0026#34;comments/valine.html\u0026#34; . }} + {{ else if $.Param \u0026#34;waline.enable\u0026#34; }} + {{ partial \u0026#34;comments/waline.html\u0026#34; . }} {{ else if $.Param \u0026#34;changyan.changyanAppid\u0026#34; }} {{ partial \u0026#34;comments/changyan.html\u0026#34; . }}   大功告成了。\n总而言之，就按照valine的配置方法去配置waline就没问题了。\n管理与邮件通知 Waline 带有简单的后台，可以实现对评论的管理。部署完成后访问\u0026lt;serverURL\u0026gt;/ui/register进行注册，第一个注册的账户会被设定成管理员。\nWaline 评论系统的介绍与基础配置  在 Vercel 的项目中添加以下新的环境变量：\n AUTHOR_EMAIL：博主邮箱，用来区分发布的评论是否是博主本身发布的。如果是博主发布的则不进行提醒通知。 SMTP_SERVICE：SMTP 邮件发送服务提供商，可以在这个页面查看所有支持的运营商。如果没在列表中的可以自行配置 SMTP_HOST 和 SMTP_PORT。 SMTP_HOST：SMTP 服务器地址，如果未配置 SMTP_SERVICE 的话该项必填。 SMTP_PORT：SMTP 服务器端口，如果未配置 SMTP_SERVICE 的话该项必填。 SMTP_USER：SMTP 邮件发送服务的用户名，一般为登录邮箱。 SMTP_PASS：SMTP 邮件发送服务的密码，一般为邮箱登录密码，部分邮箱（例如 163 邮箱）是单独的 SMTP 密码。 SITE_NAME：网站名称，用于在消息中显示。 SITE_URL：网站地址，用于在消息中显示。 SENDER_NAME：自定义发送邮件的发件人，选填。 SENDER_EMAIL：自定义发送邮件的发件地址，选填。 MAIL_SUBJECT：评论回复邮件标题自定义。 MAIL_TEMPLATE：评论回复邮件内容自定义。 MAIL_SUBJECT_ADMIN：新评论通知邮件标题自定义。 MAIL_TEMPLATE_ADMIN：新评论通知邮件内容自定义。  如果你希望邮件通知采用模板，可以使用代码，这种方式不需要设置环境变量的最后四个。找到GitHub上自动创建的那个私人仓库。仓库中有一个名为index.js的文件，删除全部内容并修改为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  const Application = require(\u0026#39;@waline/vercel\u0026#39;); module.exports = Application({ mailSubject: \u0026#39;{{parent.nick}}，您在博客「{{site.name}}」上的评论收到了回复\u0026#39;, mailTemplate: ` \u0026lt;div style=\u0026#34;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\u0026#34;\u0026gt; \u0026lt;h2 style=\u0026#34;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;\u0026#34;\u0026gt; 您在博客\u0026lt;a style=\u0026#34;text-decoration:none;color: #12ADDB;\u0026#34; href=\u0026#34;{{site.url}}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{site.name}}\u0026lt;/a\u0026gt;上的评论有了新的回复 \u0026lt;/h2\u0026gt; \u0026lt;div style=\u0026#34;padding:0 12px 0 12px;margin-top:18px\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{parent.nick}}，您曾发表评论：\u0026lt;/p\u0026gt; \u0026lt;div style=\u0026#34;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\u0026#34;\u0026gt;{{parent.comment | safe}}\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;{{self.nick}}\u0026lt;/strong\u0026gt; 回复说：\u0026lt;/p\u0026gt; \u0026lt;div style=\u0026#34;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\u0026#34;\u0026gt;{{self.comment | safe}}\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;您可以点击\u0026lt;a style=\u0026#34;text-decoration:none; color:#12addb\u0026#34; href=\u0026#34;{{site.postUrl}}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;前往原文查看完整的回复內容\u0026lt;/a\u0026gt;，欢迎再次光临\u0026lt;a style=\u0026#34;text-decoration:none; color:#12addb\u0026#34; href=\u0026#34;{{site.url}}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{site.name}}\u0026lt;/a\u0026gt;。\u0026lt;/p\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;border-top:1px solid #DDD; padding:13px 0 0 8px;\u0026#34;\u0026gt; 该邮件为系统自动发送的邮件，请勿直接回复。 \u0026lt;/div\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;/div\u0026gt;`, mailSubjectAdmin: \u0026#39;您的博客「{{site.name}}」收到了新评论\u0026#39;, mailTemplateAdmin: ` \u0026lt;div style=\u0026#34;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\u0026#34;\u0026gt; \u0026lt;h2 style=\u0026#34;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;\u0026#34;\u0026gt; 有人在\u0026lt;a style=\u0026#34;text-decoration:none;color: #12ADDB;\u0026#34; href=\u0026#34;{{site.url}}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{site.name}}\u0026lt;/a\u0026gt;发表了新的评论 \u0026lt;/h2\u0026gt; \u0026lt;div style=\u0026#34;padding:0 12px 0 12px;margin-top:18px\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;{{self.nick}}\u0026lt;/strong\u0026gt; 评论说：\u0026lt;/p\u0026gt; \u0026lt;div style=\u0026#34;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;\u0026#34;\u0026gt;{{self.comment | safe}}\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;您可以点击\u0026lt;a style=\u0026#34;text-decoration:none; color:#12addb\u0026#34; href=\u0026#34;{{site.postUrl}}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;前往原文查看完整的评论内容。\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;border-top:1px solid #DDD; padding:13px 0 0 8px;\u0026#34;\u0026gt; 该邮件为系统自动发送的邮件，请勿直接回复。 \u0026lt;/div\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;/div\u0026gt;` });   后续魔改 Hugo | 为Blog增加评论区  添加blobcat表情包 由于waline.html中未定义emoji项，所以不能使用自定义emoji，此时waline只能使用预设的weibo表情包。但是weibo怎么够用！长期刷毛象人士需要blobcat！！！\n参考官方文档，找到你想要的表情包，这里以bilibili和weibo为例。\n1 2 3 4 5 6 7 8 9 10  Waline({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;\u0026lt;YOUR SERVER URL\u0026gt;\u0026#39;, // 设置 emoji 为微博与哔哩哔哩 + emoji: [ + \u0026#39;https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo\u0026#39;, + \u0026#39;https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili\u0026#39;, + ], });   附上blobcat表情包地址：https://cdn.jsdelivr.net/gh/sowhereso/waline-blobcatemojis@1.2/blobs，同样填在emoji项中，需要自取。\n修改waline主题 Waline｜夜间样式修改  在waline.html中添加：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  \u0026lt;style\u0026gt; .waline-container { background-color: var(--card-background); border-radius: var(--card-border-radius); box-shadow: var(--shadow-l1); padding: 2%; /*缩小边距*/ } .waline-container .vcount { color: var(--card-text-color-main); } /*日间模式*/ :root{ --waline-theme-color: #34495e; /*主题色，提交按钮*/ --waline-active-color: #bababa; /*鼠标移到提交按钮上的颜色*/ --waline-badge-color: #34495e; /*博主徽章色*/ --waline-avatar-radius: 5px; /*头像圆角*/ --waline-avatar-size: 6rem; /*头像大小*/ --waline-dark-grey: #34495e; /*ID颜色*/ --waline-text-color:#6a7988; /*评论字体颜色*/ } /*夜间模式*/ :root[data-scheme=\u0026#34;dark\u0026#34;] { --waline-theme-color: #acc6e0; --waline-white: #34495e; /*按键字体颜色*/ --waline-active-color: #8ab1d8; --waline-light-grey: #666; --waline-dark-grey: #acc6e0; /*ID颜色*/ --waline-badge-color: #acc6e0; /* 布局颜色 */ --waline-text-color: rgba(255, 255, 255, 0.7); --waline-bgcolor: #515151; --waline-bgcolor-light: #66696b;/*行内代码块颜色*/ --waline-border-color: #9B9C9C; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #9B9C9C; /*quote*/ /* 其他颜色 */ --waline-info-bgcolor: #acc6e0; --waline-info-color: #9B9C9C; } \u0026lt;/style\u0026gt;   由于Zzo主题默认为dark，我对其修改为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  \u0026lt;style\u0026gt; .waline-container { background-color: var(--card-background); border-radius: var(--card-border-radius); box-shadow: var(--shadow-l1); padding: 2%; /*缩小边距*/ } .waline-container .vcount { color: var(--card-text-color-main); } /*默认*/ :root{ --waline-theme-color: #acc6e0; --waline-white: #34495e; /*按键字体颜色*/ --waline-active-color: #8ab1d8; --waline-light-grey: #666; --waline-dark-grey: #acc6e0; /*ID颜色*/ --waline-badge-color: #acc6e0; /* 布局颜色 */ --waline-text-color: rgba(255, 255, 255, 0.7); --waline-bgcolor: #515151; --waline-bgcolor-light: #66696b;/*行内代码块颜色*/ --waline-border-color: #9B9C9C; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #9B9C9C; /*quote*/ /* 其他颜色 */ --waline-info-bgcolor: #acc6e0; --waline-info-color: #9B9C9C; } \u0026lt;/style\u0026gt;   配置好的话也就是你现在看到的waline的样子。\n","description":"","id":5,"section":"posts","tags":["Hugo","Waline"],"title":"Hugo | 为Zzo主题添加Waline评论","uri":"http://blog.tantalum.life/posts/add-waline-for-hugo-blog/"},{"content":"事情的发展难以预料 受害者Roelxy：虽然这篇文章的标题是\u0026quot;博客折腾记\u0026quot;，但实际上我只是为博客换了个功能更强大的主题，结果一不小心就404了\u0026hellip;我能怎么办，我也很绝望啊！ 看中Zzo主题的搜索、代码样式和目录，英文字体也很好看，狠下心来从简洁风格的MemE跳槽而来。步骤十分傻白甜：没有git submodule，直接把仓库文件下载到本地的博客根目录，然后替换配置文件并做基础改动。Hugo server -D本地预览毫无问题，怎么就，怎么就构建失败了呢？\n The path you are accessing was not found in the Build Outputs of your Deployment.If you want to view your Build Outputs directly, you can turn on the Directory Listing.\n 访问博客时弹出的错误提示: 然而本地预览完全没有问题   博客搭建方式是hugo+Vercel，并把源码推送到Github中让其连接Vercel进行自动部署。对于这种本地预览完全没问题，但部署过程出现错误这种情况我毫无头绪，甚至还有一点小崩溃。虽然我留有存档，能一键回滚到前一个版本，但亲眼看见自己的成果功亏一篑多少还是有些难受\u0026hellip;（没错我是小白，建博客也就不到一周时间）\n修改了博客文件夹的一些内容，试图让他构建成功，无果。把这件事跟皮塔丘说了一下，她为我提供了新的思路：本地渲染，把渲染出的文件推到一个新仓库，用Github Pages发布，也就是Hugo+Github Pages的搭建方式。为了优先拯救404的博客，我先用存档将其回归正常（现在成了堆放随笔的地方），然后准备用新的域名试水（也就是这个博客）。\n历史总是惊人的相似 Suica的利用Github Pages与Github Action搭建并部署Hugo博客  对新仓库打声招呼 在Github中建立两个仓库：可以设为私密的源码仓库（存放你的博客根目录，可以随意命名，例如blog）和需要公开的编译仓库。由于一些原因，如果编译仓库的名字不是username.github.io（username是你的Github用户名）的话，会导致一些问题，比如css样式无法加载，具体来说就是将config.toml的baseURL设置为含子路径的地址，不能正确的处理所有资源的构建位置。想了解更多请看这篇博客。\n由于我之前按照这篇博客搭建过博客，所以我进行过git全局配置，且本地存有SSH key，因此略过SSH生成与上传公钥步骤。\nGithub登录后右上角Settings里找到Developer settings，再点Personal access tokens，Generate new token生成新的token，Select scopes里勾选repo全部内容与workflow，最后点击绿色按钮生成，将生成的Token保存下来。然后使用可视化的git工具：Github Desktop将支离破碎的博客根目录push到源码仓库中（使用代码也可）。进入源码仓库，可以发现本地的文件已经被推送到源码仓库了。\n点进源码仓库的Settings中，找到Secrets，点击New repository secret，名称为PERSONAL_TOKEN，内容为之前备份下来的Token。\nGithub Action是什么能吃吗 源码仓库中点击上方的Actions，set up a workflow yourself，之后你会发现github会在根目录下新建/.github/workflows/xxx.yml文件，下方是这个文件的编辑区域。把下面的配置复制进去，yml文件的名称与配置第一行的name随意填，特别注意我添加注释的地方。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  name:hugo-blogon:push:branches:- main # 源码仓库的默认分支，这里是main，有时也是masterpull_request:jobs:deploy:runs-on:ubuntu-20.04concurrency:group:${{ github.workflow }}-${{ github.ref }}steps:- uses:actions/checkout@v2# with: # 如果你安装主题时用的是git submodule add# submodules: true # 那么这三行不必注释掉，这一行填写 true# fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.89.1\u0026#39;# 填写你的hugo版本，可用hugo version查看extended:true# 如果你使用的不是extended版本的hugo，将true改为false- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3if:${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} # 注意填写main或者master，其他不要动with:personal_token:${{ secrets.PERSONAL_TOKEN }}# 如果secret取了其他名称，将PERSONAL_TOKEN替换掉external_repository:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io# 填写远程仓库，username是你的github用户名publish_dir:./publiccname:blog.example.com # 填写你的自定义域名。如果没有用自定义域名，注释掉这行  以上代码来自Suica！\n 最后那行填写自定义域名，推荐第一次部署时先注释掉，搭建完成后如果对国内/外访问速度满意的话再填写，这篇文章的最后会讲到。\n 提交commit，保存，然后可以发现action在尝试运行，绿色代表部署成功。这个时候编译仓库里可以看到自动建了一个名为gh-pages的分支，里面出现了许多东西。如果你没有填写自定义域名，那么username.github.io就是你的博客地址，此时打开你的博客域名应该已经可以看到博客内容。这种搭建方式就是Hugo+Github Action自动部署。\n很奇怪的是，如果我参考这个workflow，在部署（deploy）那步会出现奇怪的错误：\n error:src refspec main does not match any\n 因为有deploy的步骤，让我感觉感觉和Vercel的404错误差不多\u0026hellip;\n如果你有自有域名！ 在workflow中添加自有域名 如果你想在源码仓库添加workflow那一步添加自有域名，请参考Suica的自定义域名注意事项。具体来说就是先去config.toml中将baseURL改为你的自有域名，并且为workflow文件中最后注释的一行删掉注释，然后在DNS管理商那里添加一项内容为username.github.io的CNAME记录。最后进入编译仓库settings，pages页面添加自定义域名，勾选github上的强制https按钮。你也可以打开cloudflare的代理，但这样做会无法勾选强制https按钮。\n但是，由于github在国内加载速度极慢，如果想获得国内加速，可以加一层cloudflare证书，或者是Vercel(需要自有域名，Vercel分配的域名很丑)。这里推荐后者，将域名交给Vercel保管可以获得两个博客地址，一个是user.github.io（国外访问）一个是自己的域名（国内加速），好处多多。但如果你使用的主题有一些功能旨在重定向到baseURL的话，这样可能会导致一些功能出现故障（多数情况是没问题的），建议仔细检查一下。\n请问你要来点国内加速魔法吗 点击Vercel注册页面，选择使用 Github 账号注册，弹出授权窗口时，点击Authorize Vercel，随后跳转到Let\u0026rsquo;s build something new页面（如果没有，在Dashboard点击 New project），在Import Git Repository下方选择Add github org or account，弹出安装窗口，点击Install。之后再在GIT SCOPE中点击你的 Github 账户，下方的项目选择username.github.io，也就是你的编译仓库，点击skip，输入Vercel项目名（随意），然后deploy，等看到Congratulations和满屏烟花时，你获得了不错的国内加速。\nVercel点进刚刚添加的项目，右上角setting中选择domains，输入你的域名，点击add，然后refresh一下查看应该添加的DNS记录，按要求去DNS提供商那里添加（一般是内容为76.76.21.21的A记录或内容为cname.vercel-dns.com的CNAME记录），最后回到Vercel中refresh一下看到两个蓝色对号就是成功了。记得去config.toml中将baseURL改为你的自有域名，稍等一分钟就可以使用你的域名进行访问了。\n","description":"","id":6,"section":"posts","tags":["Hugo","Github Action"],"title":"Hugo | 菜鸟博客折腾记","uri":"http://blog.tantalum.life/posts/migrate-from-vercel-to-github-action/"},{"content":"MemE 2021/11/14更新：\n本站目前主题使用Zzo 目前我的博客采用MemE主题，这款主题由reuixiy制作，设计理念是轻量、极简主义，但不简陋，同时也对高度自定义非常友好，甚至还提供了简繁体中文的配置文档，也就是config.toml，以下是开发者reuixiy对MemE主题的介绍：\n MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。MemE 主题专注于优雅、简约、现代，以及代码的正确性。MemE 主题对习惯了 Hexo 的用户非常友好，是从 Hexo 迁移到 Hugo 的不错选择。\n  为什么要起名为 MemE 呢？这四个字母的含义是基于这个单词本身的，即希望你的博客以及文章能够像模因一样传播、影响。当然，希望这个主题也是如此，并给你带来欢乐。至于这四个字母的形式（MemE），则是受 Taylor Swift 的 ME! 中的「you can’t spell “awesome” without “me”」启发。同时，这两个字母的大写就将这个单词分成了两部分——ME 和 em，中间两个字母组成 em，这也给人一种可爱的感觉。此外，em 也是 me 的反写，这又是我非常喜欢的形式！\n  MemE 主题践行极简主义，没有使用现有的流行前端库，主题的 HTML 和 CSS 皆由我纯手工从零雕琢而成。同时，MemE 的 CSS 也是按需生成的，比如：如果你不需要代码高亮的功能，那么代码高亮的样式就不会被加入 MemE 的 CSS 文件中。更甚，MemE 无需加载任何图标库——主题的图标是通过 Hugo 的数据模板直接将 SVG 嵌入到 HTML 中实现的——这使得 MemE 不会去加载图标库中大量你所不需要的图标，节约了很多资源。当然，这也意味着你可以方便地自定义属于自己的图标。\n 不过我自己也是小白哈哈哈，所以也参考了很多大佬的配置。在这篇文章的最后我列出了我参考的资料。感谢各位，万物皆互联。\n基础部分 目录 在config.toml中将enableTOC设为true，然后在文章的 Front-Matters 加上toc: true即可。\n需要注意的是目录只能显示二级以下的标题。如果需要显示一级标题，可以将startLevel修改为 1（默认2）。\n 不过，并不建议在文章内用一级标题，因为一级标题为文章标题。所以，文章内还是建议以二级标题开始，这更符合逻辑，也更有利于SEO(search engine optimization)。\n 关于目录的位置，请看这个issue。\n网络字体 直接参考这篇博客。\n页脚添加今日诗词 在 MemE 主题页脚添加今日诗词  在 MemE 主题的自定义页脚文件中添加以下代码即可：\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;!-- 文件位置：~/layouts/partials/custom/footer.html --\u0026gt; \u0026lt;script src=\u0026#34;https://sdk.jinrishici.com/v2/browser/jinrishici.js\u0026#34; charset=\u0026#34;utf-8\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;text class=\u0026#34;poem_sentence\u0026#34;\u0026gt;\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;poem_info\u0026#34;\u0026gt;\u0026lt;/text\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; jinrishici.load(function(result) { var sentence = document.querySelector(\u0026#34;.poem_sentence\u0026#34;) var info = document.querySelector(\u0026#34;.poem_info\u0026#34;) sentence.innerHTML = result.data.content info.innerHTML = \u0026#39;——\u0026#39; + result.data.origin.author }); \u0026lt;/script\u0026gt;   这里我出现了一个问题，因为设置了诗句和作者之间用破折号「——」连接，而我按照教程在~/layouts/partials/custom/footer.html中添加了代码后发现破折号显示乱码，而且生成的诗句被放在了最下方，而我希望诗句处在作者和版权之间，所以我在~/layouts/partials/footer.html的适当位置添加代码。\n 需要注意我直接修改了meme主题的页脚文件而不是主题的自定义页脚文件，只适用于手动安装主题，如果是 git submodule 方式安装主题则不要直接修改主题页脚文件，否则不利于主题后续更新。\n 加载进度条 Hugo theme stack主题 正确的魔改方式  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;!-- layouts/partials/footer/custom.html --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/zhixuan2333/gh-blog@v0.1.0/js/nprogress.min.js\u0026#34; integrity=\u0026#34;sha384-bHDlAEUFxsRI7JfULv3DTpL2IXbbgn4JHQJibgo5iiXSK6Iu8muwqHANhun74Cqg\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/zhixuan2333/gh-blog@v0.1.0/css/nprogress.css\u0026#34; integrity=\u0026#34;sha384-KJyhr2syt5+4M9Pz5dipCvTrtvOmLk/olWVdfhAp858UCa64Ia5GFpTN7+G4BWpE\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; \u0026lt;script\u0026gt; NProgress.start(); document.addEventListener(\u0026#34;readystatechange\u0026#34;, () =\u0026gt; { if (document.readyState === \u0026#34;interactive\u0026#34;) NProgress.inc(0.8); if (document.readyState === \u0026#34;complete\u0026#34;) NProgress.done(); }); \u0026lt;/script\u0026gt;   需要注意stack和meme的页脚文件位置不太一样，meme的在~/layouts/partials/custom/footer.html。不过进度条是在页面顶端，所以我选择在header.html添加代码。\n短代码 在博客中插入B站视频 在博客中插入B站视频  虽然我个人相当不喜欢bilibili，但bili在哪都能看，而油管不行。\n添加代码 在layouts/shortcodes文件夹中创建文件bilibili.html(如果没有那个文件夹就自己新建一个)，我选择在博客根目录下建layouts/shortcodes文件夹，后续换主题的时候方便管理。然后粘贴如下代码：\n1 2 3 4 5 6 7 8  {{ $videoID := index .Params 0 }} {{ $pageNum := index .Params 1 | default 1}} {{ if (findRE \u0026#34;^[bB][vV][0-9a-zA-Z]+$\u0026#34; $videoID) }} \u0026lt;div\u0026gt;\u0026lt;iframe id=\u0026#34;biliplayer\u0026#34; src=\u0026#34;//player.bilibili.com/player.html?bvid={{ $videoID }}\u0026amp;page={{ $pageNum }}\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34; loading=\u0026#34;lazy\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt;\u0026lt;/div\u0026gt; {{ else }} \u0026lt;div\u0026gt;\u0026lt;iframe id=\u0026#34;biliplayer\u0026#34; src=\u0026#34;//player.bilibili.com/player.html?aid={{ $videoID }}\u0026amp;page={{ $pageNum }}\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34; loading=\u0026#34;lazy\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt;\u0026lt;/div\u0026gt; {{ end }}   然后用 CSS 修改播放器的尺寸，最好能根据不同的屏幕大小 (PC 和手机) 动态调整。在/assets/scss/components/_post-meta.scss中插入：\n1 2 3 4 5 6 7 8 9 10 11  // 嵌入 BiliBili 视频 #biliplayer { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #biliplayer { width: 100%; height: 250px; } }   或者直接在刚刚的layouts/shortcodes/bilibili.html中添加：\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;style\u0026gt; // 嵌入 BiliBili 视频 #biliplayer { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #biliplayer { width: 100%; height: 250px; } } \u0026lt;/style\u0026gt;   我在这里做了一点改动，第二步css/html的id应该是biliplayer而不是bilibili，如果看不懂的话直接复制我的代码即可。\n应用 在你想插入 B 站视频的地方写下 (AV号不带 av/AV，BV号必须带bv/BV，PV号控制分P，默认为 1，直接写不需要代码框)\n1  {{\u0026lt; bilibili [AV号/BV号] [PV号] \u0026gt;}}   以长毛象的介绍这段影片为例：\n可以写做：\n1  {{\u0026lt; bilibili BV1UW411g7eq \u0026gt;}}   或者\n1  {{\u0026lt; bilibili 21139681 \u0026gt;}}   效果如下：\n  #biliplayer { width: 100%; height: 550px; } @media only screen and (min-device-width: 320px) and (max-device-width: 480px) { #biliplayer { width: 100%; height: 250px; } }  黑幕文字 可以直接参考：https://mogeko.me/posts/zh-cn/080/\n还有更多\u0026hellip; 甩链接，实在肝不动了Orz\n鼠标点击特效 三选一，MemE主题将代码放置在/layouts/partials/custom/script.html中。\n核心价值观 参考：博客园主题。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; /* 鼠标特效，文字特效 */ var a_idx = 0; jQuery(document).ready(function($) { $(\u0026#34;body\u0026#34;).click(function(e) { var a = new Array(\u0026#34;❤富强❤\u0026#34;,\u0026#34;❤民主❤\u0026#34;,\u0026#34;❤文明❤\u0026#34;,\u0026#34;❤和谐❤\u0026#34;,\u0026#34;❤自由❤\u0026#34;,\u0026#34;❤平等❤\u0026#34;,\u0026#34;❤公正❤\u0026#34;,\u0026#34;❤法治❤\u0026#34;,\u0026#34;❤爱国❤\u0026#34;,\u0026#34;❤敬业❤\u0026#34;,\u0026#34;❤诚信❤\u0026#34;,\u0026#34;❤友善❤\u0026#34;); var $i = $(\u0026#34;\u0026lt;span\u0026gt;\u0026lt;/span\u0026gt;\u0026#34;).text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css({ \u0026#34;z-index\u0026#34;: 999999999999999999999999999999999999999999999999999999999999999999999, \u0026#34;top\u0026#34;: y - 20, \u0026#34;left\u0026#34;: x, \u0026#34;position\u0026#34;: \u0026#34;absolute\u0026#34;, \u0026#34;font-weight\u0026#34;: \u0026#34;bold\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;rgb(\u0026#34;+~~(255*Math.random())+\u0026#34;,\u0026#34;+~~(255*Math.random())+\u0026#34;,\u0026#34;+~~(255*Math.random())+\u0026#34;)\u0026#34; }); $(\u0026#34;body\u0026#34;).append($i); $i.animate({ \u0026#34;top\u0026#34;: y - 180, \u0026#34;opacity\u0026#34;: 0 }, 1500, function() { $i.remove(); }); }); }); \u0026lt;/script\u0026gt;   烟花特效 1 2 3  \u0026lt;!--鼠标点击特效，烟花效应--\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/ZhaoUncle/image@main/static/mouse-click.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;canvas width=\u0026#34;1777\u0026#34; height=\u0026#34;841\u0026#34; style=\u0026#34;position: fixed; left: 0px; top: 0px; z-index: 2147483647; pointer-events: none;\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt;   爱心特效 1  \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/ITJoker233/ITJoker233.github.io@latest/CDN/js/love.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   看板娘 将以下代码添加到/layouts/partials/footer.html中{{ end }}的前一行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  \u0026lt;!-- Live2D，网页上的小人，可以修改live2d_config.js来修改模型，模型都在static/live2d_models里面 --\u0026gt; \u0026lt;!-- 你也可以把js文件下载下来，放到static/js/目录下，就不依赖别人的服务了 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/live2d-widget@3.1.4/lib/L2Dwidget.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/live2d-widget@3.1.4/lib/L2Dwidget.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; L2Dwidget.init({ model: { scale: 1, hHeadPos: 0.5, vHeadPos: 0.618, jsonPath: \u0026#39;https://cdn.jsdelivr.net/gh/DomathID/live2d-model@main/Nindi/model.json\u0026#39;, // xxx.model.json 的路径,换人物修改这个  }, display: { superSample: 1, // 超采样等级  width: 200, // canvas的宽度  height: 350, // canvas的高度  position: \u0026#39;left\u0026#39;, // 显示位置：左或右  hOffset: 0, // canvas水平偏移  vOffset: 0, // canvas垂直偏移  }, mobile: { show: true, // 是否在移动设备上显示  scale: 1, // 移动设备上的缩放  motion: true, // 移动设备是否开启重力感应  }, react: { opacityDefault: 1, // 默认透明度  opacityOnHover: 1, // 鼠标移上透明度  }, }); \u0026lt;/script\u0026gt;   配置Waline评论 Waline 评论系统的介绍与基础配置  按照Waline官方文档快速开始。\n第一步推荐使用 LeanCloud 国际版，因为国内版还需要和备案的域名绑定，很是麻烦。第二步利用Vercel部署Waline，点击官方给出的快速部署链接，也就是那个deploy蓝色按钮，然后按照官方文档继续部署，直到你获得ServerURL，也就是服务端地址。\n在/layouts/partials/components/comments.html中添加代码：\n1 2 3 4 5 6 7 8 9  {{ if and (.Params.comments | default .Site.Params.enableComments) (eq hugo.Environment \u0026#34;production\u0026#34;) }} {{ if or (in .Site.Params.mainSections .Section) .Params.comments }} + {{ if .Site.Params.enableWaline }} + \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; + {{ end }} {{ end }} {{ end }}   在/layouts/layouts/third-party/script.html中添加代码：\n1 2 3 4 5 6 7 8 9  {{ if and (.Params.comments | default .Site.Params.enableComments) (eq hugo.Environment \u0026#34;production\u0026#34;) }} {{ if or (in .Site.Params.mainSections .Section) .Params.comments }} + {{ if .Site.Params.enableWaline }} + {{ partial \u0026#34;third-party/waline.html\u0026#34; . }} + {{ end }} {{ end }} {{ end }}   在/layouts/layouts/third-party中新建waline.html，添加：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  \u0026lt;script\u0026gt; function loadComments() { if (typeof Waline === \u0026#39;undefined\u0026#39;) { var getScript = (options) =\u0026gt; { var script = document.createElement(\u0026#39;script\u0026#39;); script.defer = true; script.crossOrigin = \u0026#39;anonymous\u0026#39;; Object.keys(options).forEach((key) =\u0026gt; { script[key] = options[key]; }); document.body.appendChild(script); }; getScript({ src: \u0026#39;https://cdn.jsdelivr.net/npm/@waline/client/dist/Waline.min.js\u0026#39;, onload: () =\u0026gt; { newWaline(); } }); } else { newWaline(); } } function newWaline() { new Waline({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;{{ .Site.Params.walineServerURL }}\u0026#39;, placeholder: \u0026#39;{{ .Site.Params.walinePlaceholder }}\u0026#39;, avatar: \u0026#39;{{ .Site.Params.walineAvatar }}\u0026#39;, meta: {{ .Site.Params.walineMeta }}, pageSize: {{ .Site.Params.walinePageSize }}, lang: \u0026#39;{{ .Site.Params.walineLang }}\u0026#39;, highlight: {{ .Site.Params.walineHighlight }}, avatarCDN: \u0026#39;{{ .Site.Params.walineAvatarCDN }}\u0026#39;, requiredFields: {{ .Site.Params.walineRequiredFields }} }); } \u0026lt;/script\u0026gt;   在博客配置文件config.toml中添加：\n1 2 3 4 5 6 7 8 9 10 11 12  ## Waline enableWaline = true walineServerURL = \u0026#34;\u0026#34; walinePlaceholder = \u0026#34;请填写正确的昵称和邮箱，方便接收评论回复信息哦。\u0026#34; #留言框占位提示文字 walineAvatar = \u0026#34;mp\u0026#34; walineMeta = [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;, \u0026#34;link\u0026#34;] walinePageSize = 10 walineLang = \u0026#34;zh-CN\u0026#34; walineHighlight = true walineAvatarCDN = \u0026#34;https://cdn.v2ex.com/gravatar/\u0026#34; walineRequiredFields = [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;] # 说明：https://waline.js.org/   邮件通知与后续魔改请见Hugo | 为Zzo主题添加Waline评论。\n特别鸣谢  Hugo 主题 MemE 文档   MemE主题的官方文档\n  Guan Qirui的个人博客源代码   config.toml可供参考\n  Guan Qirui的个人博客：荷戟独彷徨   建站笔记，包括Waline评论、短代码、今日诗词等\n  天涯共此时的meme主题优化   config.toml解读以及网络字体如何添加\n  Hugo theme stack主题 正确的魔改方式   stack主题的魔改教程，参考了加载进度条\n  Mogeko\u0026rsquo;s Blog   参考了短代码配置\n ","description":"","id":7,"section":"posts","tags":["Hugo","Waline","HTML"],"title":"Hugo | 记录MemE主题美化过程","uri":"http://blog.tantalum.life/posts/adjust-meme-theme/"},{"content":"躺平者宣言\n福报将至，我从今开始躺平，至死方休。我将不结婚，不买房，不生子。我将不买包包，不戴名表。我将游手好闲，做一天阔以玩三天。我是工位上的摸鱼仔，城市中的流浪汉，是抵御消费主义的钝剑，划破内卷阴影的光线，是现代病的药到病除，是存在与不存在之万物的尺度。我将懒散与悠闲献给躺平人，今日如此，日日皆然。”\n 你好这位人类，我是新世纪摸鱼战士Roelxy，欢迎来到我的技术博客。作为超高校级的鸽王，我的拿手技能是咕咕咕...   .spoiler { color: black; background-color: black; } .spoiler:hover { color: white; }  爱好是做一名善良的人类，整天幻想人类灭绝以此能终生躺平，平时会研究神秘学，最近在研究塔罗和利诺曼，看工口作品时会超速爬墙。同时附上我的藏书阁，我的胡乱随笔和喜欢的作品存档都在那里。\n本站目前使用的主题是Zzo，使用Hugo进行页面渲染，评论功能基于Waline。\n如果您想联系我，博客的评论系统有邮件通知功能，即使在游客状态下也可以发布评论，除非填写了错误的邮箱，否则您不会错过任何评论通知。您也可以选择在页脚中找到我的邮箱和Telegram帐号。如果您也是联邦宇宙(fedi)友邻的话，欢迎来关注我的Mastodon。\n那么，祝您旅途愉快！\n","description":"","id":8,"section":"","tags":null,"title":"About","uri":"http://blog.tantalum.life/about/"},{"content":"一些碎碎念 搭建自己的静态博客这件事，对我本人来说还没有什么真实感。不过既然都已经为了建站捣鼓了域名和服务器，那多一个blog（个人网站）也是完全可以预料到的事，更何况不是部署在服务器内的动态博客，而是只需要一台普通电脑就能搞定的静态博客。\n不过本鸽王之前打算用友邻搭建的pleroma实例写blog，理由是支持我最爱的BBCode，当然还有markdown和HTML。缺点是没有主页推荐和搜索功能，全靠我置顶嘟文那现实吗！后来我发现了Writefreely，凭借着简单的二进制文件安装方式和简约的白纸黑字视觉体验，我火速在服务器里搭建了个站，结果悲剧地发现——这货不支持BBCode，但胜在太简单了，简单到无需docker安装，于是被我压箱底了（。\n后来？其实当时只是想做一个静态网页的，连主题都不需要的居中显示的网页，但是Google一下发现好多用的都是wordpress动态博客（连在自己博客里加喜欢的脚本都要付费吗魂淡），又或是装好多依赖的静态博客。作为一个常年躺平人士这显然不合适（喂），于是我终于找到了不完全依赖本地又能轻松修改配置的博客搭建方式：Hugo静态网页渲染+Vercel网页托管自动部署+Github代码托管，主题截止目前敲定了MemE，可能以后会改，毕竟我连css全称是什么都不知道XDD\u0026hellip;\n2021/11/14更新：\n本站目前主题使用Zzo 嘛，总而言之我blog就是这样在机缘巧合之下诞生了，难道不值得おめでとう一下吗！\n这次不会也压箱底吧 大概\u0026hellip;不会的，不过我在冰水混合物的这篇博客里发现了Typecho，如果有机会的话我可能要尝试一下用这个搭建动态博客，到时候可能会选择性拆迁一个博客。所以\u0026hellip;结果谁知道呢。\nWritefreely那边我用来发长毛象运维教程了，这边的话目测会发更多奇奇怪怪的东西（？）反正也不会有人看，千万不要期待就没问题了！\n特别鸣谢 皮塔丘（ @Hydrangea@o3o.ca）的Hugo简明搭建笔记\n","description":"","id":9,"section":"posts","tags":["Hugo","Vercel"],"title":"Hugo | 静态博客搭建有感","uri":"http://blog.tantalum.life/posts/after-building-a-static-blog/"},{"content":" 注：本文写作目的为记录所知所学，并向手把手指导我的兔子大佬（ @star@b612.me ）致敬。本教程如有帮到读者亦感荣幸。\n 以下操作默认均在root用户下执行。\nroot用户:sudo -i\n一些可以参考的教程 https://guide.mastodon.im/ #salt站长的长毛象（Mastodon）社区搭建详解，非docker小白向建站指南，本教程有部分参考 https://pullopen.github.io/%E8%BF%9B%E9%98%B6%E9%AD%94%E6%94%B9/2020/11/14/mastodon-modify.html #pullopen站长进阶魔改：修改字数上限、媒体上限、投票上限、添加自定义主题、界面用语、非登陆用户有限显示，附阻止本站嘟文流入某站点方法 https://pullopen.github.io/%E8%BF%9B%E9%98%B6%E9%AD%94%E6%94%B9/2020/11/01/Mastodon-on-Docker-2.html #pullopen站长如何利用Docker搭建Mastodon实例（二）：进阶魔改篇 长毛象配置文件夹 如何确定你的长毛象配置文件夹呢？\nfind / -name docker-compose.yml #寻找名为docker-compose.yml的文件所在位置 在返回结果中找到看起来最靠谱的那个位置，然后\ncd /your/own/path #/your/own/path为刚刚返回结果中的位置，比如cd /opt/mastodon 这样就可以进入你的长毛象配置文件夹。\n在配置文件夹中运行：\ndocker-compose exec web /bin/bash 然后再docker ps 你就能看到mastodon的服务了。\nDocker 是什么？   简便的理解：  把docker当作一个虚拟机，相当于你的mastodon跑在你现在vps的虚拟机里面，所以不能直接在vps的用户下执行tootctl命令。进入到这个“虚拟机”里面可以在docker-compose.yml文件所在的文件夹下（也就是长毛象配置文件夹，此文件夹相当于非docker的 /home/mastodon/live）。   如果你像我一样，在长毛象配置文件夹下运行docker-compose exec web /bin/bash命令时出现了以下错误：\n可能是因为Python依赖没装全，运行pip install ordered_dict安装依赖。\n如果安装python依赖也标红，返回错误结果：\nCould not find a version that satisfies the requirement ordered_dict (from versions: ) No matching distribution found for ordered_dict 这种情况可能需要重装一下docker-compose：\nwhich docker-compose #找到docker-compose的安装位置，例如/usr/bin rm -rf /usr/bin/docker-compose #以/usr/bin 为例，rm递归删除此文件 然后再按照docker官网的Linux安装方式重装docker-compose：\n之后可以正常看到，docker-compose run --rm web bin/tootctl能够正常运行，由于我们并没有运行官方文档tootctl命令集中的任何命令，因此ctrl+c退出即可。\n有帮助的命令： docker-compose run --rm web bin/tootctl 具体命令 #运行mastodon tootctl命令，比如docker-compose run --rm web bin/tootctl cache clear docker-compose run --rm web bin/tootctl reload #重启长毛象 cd /opt/mastodon #跳转至长毛象配置文件夹，此后教程均以此文件位置为例 find / -name filename #寻找名为filename的文件 which filename #寻找实际执行命令的文件 ls -a filepath #列出filepath文件夹内的所有文件 apt update \u0026amp;\u0026amp; apt install wget rsync python git curl vim git ufw -y #安装一些常用命令 需要熟悉位置和名称的配置文件 cd /opt/mastodon #进入长毛象配置文件夹 nano .env.production #长毛象配置文件的修改方法 而在非docker中，此文件的修改方法如下。\ncd /home/mastodon/live #进入长毛象配置文件夹 nano .env.production #长毛象配置文件的修改方法 那么我们现在开始吧。\n基础运维 使用alias脚本缩写tootctl命令 （此脚本由兔子大佬编写）\n以执行help为例，需要运行docker-compose run --rm web bin/tootctl help,前缀非常麻烦，如果能简化为tootctl help似乎就简单得多。那么如何进行tootctl命令的缩写呢？\ncd /opt/mastodon #跳转至目标文件夹 vim tootctl.sh #将以下内容写入/opt/mastodon中并命名为tootctl.sh 以下为脚本内容：\n#!/bin/bash lpwd=$PWD mypath=`dirname $0` cd $mypath if [ $# -ge 1 ] then case $1 in \u0026quot;restart\u0026quot;) docker-compose restart ;; \u0026quot;reload\u0026quot;) docker-compose down \u0026amp;\u0026amp; docker-compose up -d ;; \u0026quot;stop\u0026quot;) docker-compose down ;; \u0026quot;start\u0026quot;) docker-compose up -d ;; \u0026quot;psql\u0026quot;) docker-compose exec db $* ;; *) docker-compose run --rm web bin/tootctl $* ;; esac else echo \u0026quot;please use tootctl help for help\u0026quot; fi cd $lpwd 然后执行：\nchmod +x /opt/mastodon/tootctl.sh echo \u0026quot;alias tootctl='/opt/mastodon/tootctl.sh' \u0026quot; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc 之后就能用tootctl这个命令来调用tootctl而不用输入繁琐的前缀了，从而达到缩写命令的目的。\n本教程此后所有tootctl命令均会缩写\n清理docker镜像脚本 此脚本日常运维并不常用，不是用来清理mastodon远程媒体的，而是经过升级/魔改操作后删掉旧的镜像（images）的，但有总比没有强。如果你的服务器中没有docker-clean.sh脚本，那么在/opt/astodon文件夹中，运行vim docker-clean.sh，将以下内容写入其中，然后保存。\n GNU nano 2.9.3 docker-clean.sh #!/bin/bash # remove exited containers: docker ps --filter status=dead --filter status=exited -aq | xargs -r docker rm -v # remove unused images: docker images --no-trunc | grep '\u0026lt;none\u0026gt;' | awk '{ print $3 }' | xargs -r docker rmi # remove unused volumes (needs to be ran as root): find '/var/lib/docker/volumes/' -mindepth 1 -maxdepth 1 -type d | grep -vFf \u0026lt;( docker ps -aq | xargs docker inspect | jq -r '.[]|.Mounts|.[]|.Name|select(.)' ) | xargs -r rm -fr # remove all images without at least one container docker image prune -a 当想要使用此脚本时，运行：\ncat docker-clean.sh 然后按照提示结果输入相应命令，清理虚悬镜像/无用镜像即可。\n部署媒体文件外部存储服务 由于Scaleway object storage存储空间免费限额 75 GB，我们以此为例进行设置。\ncd /opt/mastodon #进入目标文件夹 #清理外站缓存和无嘟文媒体，为一会儿的迁移减少工作量 tootctl media remove #移除本地缓存的其它实例媒体附件 tootctl media remove-orphans #扫描出不属于任何媒体附件的文件并移除他们，此操作需要遍历每个文件，因此速度很慢。 首先借用salt站长的配置教程，选择外部存储的节点。\n注册后，创建 Project（可选，或直接使用预设project）和Bucket，然后按照教程获取 API Key，注意无论如何获取API Key的project和Bucket所在的project必须相同，如果获取的是mastodon project的API Key，而Bucket设置在default project里，是不可以的。\napt install python-pip pip install awscli #安装aws-cli aws configure #调试aws-cli 按指示依次输入Access Key和Secret Key。Region部分填写fr-par/nl-ams/pl-waw。Default output format直接回车即可。\n继续按照salt站长的教程继续编辑长毛象配置文件.env.production，保存。\n此处参考pullopen站长同步已有媒体的步骤，运行：\naws s3 sync public/system s3://【你的bucket名】/ --endpoint-url=https://你的储存桶地区地址 --acl public-read 等待媒体文件全部上传至外部存储服务即可，在此期间可以ps -ef | grep aws用screen做守护进程。完成后运行docker reload重启 Mastodon服务。\n最后，salt站长的教程中绑定 Cloudflare这里，最后注意添加一步：Auto Minify（位置：speed\u0026gt;最佳化\u0026gt;自动缩制）在3.3.0版本之后会影响网页打开，请勿勾选！\n确定设置无误后，执行以下命令：\ndocker reload #重启Mastodon的docker容器 rm -rf /opt/mastodon/public/system #清理本地文件 以上步骤，可以将媒体文件同步至s3，并清理本地硬盘文件。\n定期清理外站媒体文件 此处依旧参考salt站长的配置教程，但对命令做了改动使其能在docker中使用。\ncrontab -e #编辑定时任务 选择1后将以下内容填入并保存：\n0 3 * * * /opt/mastodon/tootctl.sh media remove --days=14 0 3 * * * /opt/mastodon/tootctl.sh media remove-orphans 0 3 * * * /opt/mastodon/tootctl.sh statuses remove --days=90 定时任务会在每天服务器时间的3点清理缓存 14 天以上的外站媒体文件、“无主”媒体文件、同本站任何用户产生关联的 90 天以上的 toot。\n落笔感悟 虽然本教程基本都是兔子大佬的成果，但怎么说从看教程到整理材料落笔写教程这个过程也是有很大收获的。从第一次接触Linux到着手购买域名开始建站一共也就两个月的时间，到现在这篇教程完成也只是将近三个月。三个月从:wq到虚拟机再到购买主机开始建站，从谷歌如何用vm打开一个新的虚拟机到能用命令行基础运维一个网站，我也没想到有些事情我就是能。虽然这个过程该踩的坑都踩过了，但毕竟是我经历的，那就有话可说。\n在这里也非常感谢各位站长的教程，bgme站长帮我迁移docker，还有兔酱的对我提问所做的回答，以及ta非常优秀的脚本。虽然我依旧是个小白，但我相信我能走下去。\n","description":"","id":10,"section":"posts","tags":["Mastodon","Docker"],"title":"Mastodon | 采用docker建站后的使用与维护","uri":"http://blog.tantalum.life/posts/how-to-run-your-mastodon-by-docker/"}]